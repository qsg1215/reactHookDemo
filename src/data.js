let data = [{"funcName":"chunk","useAge":"_.chunk(array, [size=1])","desc":"将数组（array）拆分成多个 size 长度的区块，并将这些区块组成一个新数组。 如果array 无法被分割成全部等长的区块，那么最后剩余的元素将组成一个区块。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.11.0/lodash.js#L5880","version":"3.0.0","params":[{"key":"array (Array)","desc":" 需要处理的数组","isNeed":true,"type":"Array","paramName":"array"},{"key":"[size=1] (number)","desc":" 每个数组区块的长度","isNeed":false,"type":"number","paramName":"size","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回一个包含拆分区块的新数组（相当于一个二维数组）。","type":"Array"},"demoCode":"_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n \n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]","class":"Array"},{"funcName":"compact","useAge":"_.compact(array)","desc":"创建一个新数组，包含原数组中所有的非假值元素。例如false, null, 0, \"\", undefined, 和 NaN 都是被认为是“假值”。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L6705","version":"0.1.0","params":[{"key":"array (Array)","desc":" 待处理的数组","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(Array)","desc":" 返回过滤掉假值的新数组。","type":"Array"},"demoCode":"_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]","class":"Array"},{"funcName":"concat","useAge":"_.concat(array, [values])","desc":"创建一个新数组，将array与任何数组 或 值连接在一起。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L6742","version":"4.0.0","params":[{"key":"array (Array)","desc":" 被连接的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[values] (...*)","desc":" 连接的值。","isNeed":false,"type":"...*","paramName":"[values]"}],"back":{"key":"(Array)","desc":" 返回连接后的新数组。","type":"Array"},"demoCode":"var array = [1];\nvar other = _.concat(array, 2, [3], [[4]]);\n \nconsole.log(other);\n// => [1, 2, 3, [4]]\n \nconsole.log(array);\n// => [1]","class":"Array"},{"funcName":"difference","useAge":"_.difference(array, [values])","desc":"创建一个具有唯一array值的数组，每个值不包含在其他给定的数组中。（即创建一个新数组，这个数组中的值，为第一个数字（array 参数）排除了给定数组中的值。）该方法使用 SameValueZero做相等比较。结果值的顺序是由第一个数组中的顺序确定。\n\n注意: 不像 _.pullAll，这个方法会返回一个新数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L6778","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要检查的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[values] (...Array)","desc":" 排除的值。","isNeed":false,"type":"...Array","paramName":"[values]"}],"back":{"key":"(Array)","desc":" 返回一个过滤值后的新数组。","type":"Array"},"demoCode":"_.difference([3, 2, 1], [4, 2]);\n// => [3, 1]","class":"Array"},{"funcName":"differenceBy","useAge":"_.differenceBy(array, [values], [iteratee=_.identity])","desc":"这个方法类似 _.difference ，除了它接受一个 iteratee （迭代器）， 调用array 和 values 中的每个元素以产生比较的标准。 结果值是从第一数组中选择。iteratee 会调用一个参数：(value)。（首先使用迭代器分别迭代array 和 values中的每个元素，返回的值作为比较值）。\n\nNote: 不像 _.pullAllBy，这个方法会返回一个新数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L6810","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要检查的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[values] (...Array)","desc":" 排除的值。","isNeed":false,"type":"...Array","paramName":"[values]"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" iteratee 调用每个元素。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回一个过滤值后的新数组。","type":"Array"},"demoCode":"_.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);\n// => [3.1, 1.3]\n \n// The `_.property` iteratee shorthand.\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]","class":"Array"},{"funcName":"differenceWith","useAge":"_.differenceWith(array, [values], [comparator])","desc":"这个方法类似 _.difference ，除了它接受一个 comparator （比较器），它调用比较array，values中的元素。 结果值是从第一数组中选择。comparator 调用参数有两个：(arrVal, othVal)。\n\nNote: 不像 _.pullAllWith, 这个方法会返回一个新数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L6843","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要检查的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[values] (...Array)","desc":" 排除的值。","isNeed":false,"type":"...Array","paramName":"[values]"},{"key":"[comparator] (Function)","desc":" comparator 调用每个元素。","isNeed":false,"type":"Function","paramName":"[comparator]"}],"back":{"key":"(Array)","desc":" 返回一个过滤值后的新数组。","type":"Array"},"demoCode":"var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n \n_.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n// => [{ 'x': 2, 'y': 1 }]","class":"Array"},{"funcName":"drop","useAge":"_.drop(array, [n=1])","desc":"创建一个切片数组，去除array前面的n个元素。（n默认值为1。）","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L6878","version":"0.5.0","params":[{"key":"array (Array)","desc":" 要查询的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[n=1] (number)","desc":" 要去除的元素个数。","isNeed":false,"type":"number","paramName":"n","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回array剩余切片。","type":"Array"},"demoCode":"_.drop([1, 2, 3]);\n// => [2, 3]\n \n_.drop([1, 2, 3], 2);\n// => [3]\n \n_.drop([1, 2, 3], 5);\n// => []\n \n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]","class":"Array"},{"funcName":"dropRight","useAge":"_.dropRight(array, [n=1])","desc":"创建一个切片数组，去除array尾部的n个元素。（n默认值为1。）","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L6912","version":"3.0.0","params":[{"key":"array (Array)","desc":" 要查询的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[n=1] (number)","desc":" 要去除的元素个数。","isNeed":false,"type":"number","paramName":"n","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回array剩余切片。","type":"Array"},"demoCode":"_.dropRight([1, 2, 3]);\n// => [1, 2]\n \n_.dropRight([1, 2, 3], 2);\n// => [1]\n \n_.dropRight([1, 2, 3], 5);\n// => []\n \n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]","class":"Array"},{"funcName":"dropRightWhile","useAge":"_.dropRightWhile(array, [predicate=_.identity])","desc":"创建一个切片数组，去除array中从 predicate 返回假值开始到尾部的部分。predicate 会传入3个参数： (value, index, array)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L6957","version":"3.0.0","params":[{"key":"array (Array)","desc":" 要查询的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[predicate=_.identity] (Function)","desc":" 这个函数会在每一次迭代调用。","isNeed":false,"type":"Function","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回array剩余切片。","type":"Array"},"demoCode":"var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n \n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n \n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']","class":"Array"},{"funcName":"dropWhile","useAge":"_.dropWhile(array, [predicate=_.identity])","desc":"创建一个切片数组，去除array中从起点开始到 predicate 返回假值结束部分。predicate 会传入3个参数： (value, index, array)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L6999","version":"3.0.0","params":[{"key":"array (Array)","desc":" 要查询的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[predicate=_.identity] (Function)","desc":" 这个函数会在每一次迭代调用。","isNeed":false,"type":"Function","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回array剩余切片。","type":"Array"},"demoCode":"var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.dropWhile(users, function(o) { return !o.active; });\n// => objects for ['pebbles']\n \n// The `_.matches` iteratee shorthand.\n_.dropWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['fred', 'pebbles']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.dropWhile(users, ['active', false]);\n// => objects for ['pebbles']\n \n// The `_.property` iteratee shorthand.\n_.dropWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']","class":"Array"},{"funcName":"fill","useAge":"_.fill(array, value, [start=0], [end=array.length])","desc":"使用 value 值来填充（替换） array，从start位置开始, 到end位置结束（但不包含end位置）。Note: 这个方法会改变 array（不是创建新数组）。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7034","version":"3.2.0","params":[{"key":"array (Array)","desc":" 要填充改变的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"value (*)","desc":" 填充给 array 的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[start=0] (number)","desc":" 开始位置（默认0）。","isNeed":false,"type":"number","paramName":"start","initValue":"0"},{"key":"[end=array.length] (number)","desc":"结束位置（默认array.length）。","isNeed":false,"type":"number","paramName":"end","initValue":"array.length"}],"back":{"key":"(Array)","desc":" 返回 array。","type":"Array"},"demoCode":"var array = [1, 2, 3];\n \n_.fill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n \n_.fill(Array(3), 2);\n// => [2, 2, 2]\n \n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]","class":"Array"},{"funcName":"findIndex","useAge":"_.findIndex(array, [predicate=_.identity], [fromIndex=0])","desc":"该方法类似 _.find，区别是该方法返回第一个通过 predicate 判断为真值的元素的索引值（index），而不是元素本身。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7082","version":"1.1.0","params":[{"key":"array (Array)","desc":" 要搜索的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 这个函数会在每一次迭代调用。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"},{"key":"[fromIndex=0] (number)","desc":" The index to search from.","isNeed":false,"type":"number","paramName":"fromIndex","initValue":"0"}],"back":{"key":"(number)","desc":" 返回找到元素的 索引值（index），否则返回 -1。","type":"number"},"demoCode":"var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n \n// The `_.matches` iteratee shorthand.\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findIndex(users, ['active', false]);\n// => 0\n \n// The `_.property` iteratee shorthand.\n_.findIndex(users, 'active');\n// => 2","class":"Array"},{"funcName":"findLastIndex","useAge":"_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length-1])","desc":"这个方式类似 _.findIndex， 区别是它是从右到左的迭代集合array中的元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7130","version":"2.0.0","params":[{"key":"array (Array)","desc":" 要搜索的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 这个函数会在每一次迭代调用。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"},{"key":"[fromIndex=array.length-1] (number)","desc":" The index to search from.","isNeed":false,"type":"number","paramName":"fromIndex","initValue":"array.length-1"}],"back":{"key":"(number)","desc":" 返回找到元素的 索引值（index），否则返回 -1。","type":"number"},"demoCode":"var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n \n// The `_.matches` iteratee shorthand.\n_.findLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findLastIndex(users, ['active', false]);\n// => 2\n \n// The `_.property` iteratee shorthand.\n_.findLastIndex(users, 'active');\n// => 0","class":"Array"},{"funcName":"flatten","useAge":"_.flatten(array)","desc":"减少一级array嵌套深度。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7159","version":"0.1.0","params":[{"key":"array (Array)","desc":" 需要减少嵌套层级的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(Array)","desc":" 返回减少嵌套层级后的新数组。","type":"Array"},"demoCode":"_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]","class":"Array"},{"funcName":"flattenDeep","useAge":"_.flattenDeep(array)","desc":"将array递归为一维数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7178","version":"3.0.0","params":[{"key":"array (Array)","desc":" 需要处理的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(Array)","desc":" 返回一个的新一维数组。","type":"Array"},"demoCode":"_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]","class":"Array"},{"funcName":"flattenDepth","useAge":"_.flattenDepth(array, [depth=1])","desc":"根据 depth 递归减少 array 的嵌套层级","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7203","version":"4.4.0","params":[{"key":"array (Array)","desc":" 需要减少嵌套层级的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[depth=1] (number)","desc":"最多减少的嵌套层级数。","isNeed":false,"type":"number","paramName":"depth","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回减少嵌套层级后的新数组。","type":"Array"},"demoCode":"var array = [1, [2, [3, [4]], 5]];\n \n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n \n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]","class":"Array"},{"funcName":"fromPairs","useAge":"_.fromPairs(pairs)","desc":"与 _.toPairs正好相反；这个方法返回一个由键值对pairs构成的对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7227","version":"4.0.0","params":[{"key":"pairs (Array)","desc":" 键值对pairs。","isNeed":true,"type":"Array","paramName":"pairs"}],"back":{"key":"(Object)","desc":" 返回一个新对象。","type":"Object"},"demoCode":"_.fromPairs([['fred', 30], ['barney', 40]]);\n// => { 'fred': 30, 'barney': 40 }","class":"Array"},{"funcName":"head","useAge":"_.head(array)","aliasFuncName":"_.first","desc":"获取数组 array 的第一个元素。引入版本","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7257","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要查询的数组。"}],"back":{"key":"(*)","desc":" 返回数组 array的第一个元素。","type":"*"},"demoCode":"_.head([1, 2, 3]);\n// => 1\n \n_.head([]);\n// => undefined","class":"Array"},{"funcName":"indexOf","useAge":"_.indexOf(array, value, [fromIndex=0])","desc":"使用 SameValueZero 等值比较，返回首次 value 在数组array中被找到的 索引值， 如果 fromIndex 为负值，将从数组array尾端索引进行匹配。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7284","version":"0.1.0","params":[{"key":"array (Array)","desc":" 需要查找的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"value (*)","desc":" 需要查找的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[fromIndex=0] (number)","desc":" 开始查询的位置。","isNeed":false,"type":"number","paramName":"fromIndex","initValue":"0"}],"back":{"key":"(number)","desc":" 返回 值value在数组中的索引位置, 没有找到为返回-1。","type":"number"},"demoCode":"_.indexOf([1, 2, 1, 2], 2);\n// => 1\n \n// Search from the `fromIndex`.\n_.indexOf([1, 2, 1, 2], 2, 2);\n// => 3","class":"Array"},{"funcName":"initial","useAge":"_.initial(array)","desc":"获取数组array中除了最后一个元素之外的所有元素（去除数组array中的最后一个元素）。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7310","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要查询的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(Array)","desc":" 返回截取后的数组array。","type":"Array"},"demoCode":"_.initial([1, 2, 3]);\n// => [1, 2]","class":"Array"},{"funcName":"intersection","useAge":"_.intersection([arrays])","desc":"创建唯一值的数组，这个数组包含所有给定数组都包含的元素，使用 SameValueZero进行相等性比较。（可以理解为给定数组的交集）","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7332","version":"0.1.0","params":[{"key":"[arrays] (...Array)","desc":" 待检查的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"}],"back":{"key":"(Array)","desc":" 返回一个包含所有传入数组交集元素的新数组。","type":"Array"},"demoCode":"_.intersection([2, 1], [4, 2], [1, 2]);\n// => [2]","class":"Array"},{"funcName":"intersectionBy","useAge":"_.intersectionBy([arrays], [iteratee=_.identity])","desc":"这个方法类似 _.intersection，区别是它接受一个 iteratee 调用每一个arrays的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择。iteratee 会传入一个参数：(value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7362","version":"4.0.0","params":[{"key":"[arrays] (...Array)","desc":" 待检查的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" iteratee（迭代器）调用每个元素。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回一个包含所有传入数组交集元素的新数组。","type":"Array"},"demoCode":"_.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n// => [2.1]\n \n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]","class":"Array"},{"funcName":"intersectionWith","useAge":"_.intersectionWith([arrays], [comparator])","desc":"这个方法类似 _.intersection，区别是它接受一个 comparator 调用比较arrays中的元素。结果值是从第一数组中选择。comparator 会传入两个参数：(arrVal, othVal)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7397","version":"4.0.0","params":[{"key":"[arrays] (...Array)","desc":" 待检查的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"},{"key":"[comparator] (Function)","desc":" comparator（比较器）调用每个元素。","isNeed":false,"type":"Function","paramName":"[comparator]"}],"back":{"key":"(Array)","desc":" 返回一个包含所有传入数组交集元素的新数组。","type":"Array"},"demoCode":"var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.intersectionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }]","class":"Array"},{"funcName":"join","useAge":"_.join(array, [separator=','])","desc":"将 array 中的所有元素转换为由 separator 分隔的字符串。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7426","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要转换的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[separator=','] (string)","desc":" 分隔元素。","isNeed":false,"type":"string","paramName":"separator","initValue":"','"}],"back":{"key":"(string)","desc":" 返回连接字符串。","type":"string"},"demoCode":"_.join(['a', 'b', 'c'], '~');\n// => 'a~b~c'","class":"Array"},{"funcName":"last","useAge":"_.last(array)","desc":"获取array中的最后一个元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7444","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要检索的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"返回值","isNeed":true,"type":"返回","paramName":"返回值"}],"back":{"key":"例子","type":""},"demoCode":"Try in REPL","class":"Array"},{"funcName":"lastIndexOf","useAge":"_.lastIndexOf(array, value, [fromIndex=array.length-1])","desc":"这个方法类似 _.indexOf ，区别是它是从右到左遍历array的元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7470","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要搜索的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"value (*)","desc":" 要搜索的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[fromIndex=array.length-1] (number)","desc":" 开始搜索的索引值。","isNeed":false,"type":"number","paramName":"fromIndex","initValue":"array.length-1"}],"back":{"key":"(number)","desc":" 返回匹配值的索引值，否则返回 -1。","type":"number"},"demoCode":"_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n \n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1","class":"Array"},{"funcName":"nth","useAge":"_.nth(array, [n=0])","desc":"获取array数组的第n个元素。如果n为负数，则返回从数组结尾开始的第n个元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7506","version":"4.11.0","params":[{"key":"array (Array)","desc":" 要查询的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[n=0] (number)","desc":" 要返回元素的索引值。","isNeed":false,"type":"number","paramName":"n","initValue":"0"}],"back":{"key":"(*)","desc":" 获取array数组的第n个元素。","type":"*"},"demoCode":"var array = ['a', 'b', 'c', 'd'];\n \n_.nth(array, 1);\n// => 'b'\n \n_.nth(array, -2);\n// => 'c';","class":"Array"},{"funcName":"pull","useAge":"_.pull(array, [values])","desc":"移除数组array中所有和给定值相等的元素，使用 SameValueZero 进行全等比较。\n\n注意： 和 _.without 方法不同，这个方法会改变数组。使用 _.remove 从一个数组中移除元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7533","version":"2.0.0","params":[{"key":"array (Array)","desc":" 要修改的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[values] (...*)","desc":" 要删除的值。","isNeed":false,"type":"...*","paramName":"[values]"}],"back":{"key":"(Array)","desc":" 返回 array.","type":"Array"},"demoCode":"var array = [1, 2, 3, 1, 2, 3];\n \n_.pull(array, 2, 3);\nconsole.log(array);\n// => [1, 1]","class":"Array"},{"funcName":"pullAll","useAge":"_.pullAll(array, values)","desc":"这个方法类似 _.pull，区别是这个方法接收一个要移除值的数组。\n\nNote: 不同于 _.difference, 这个方法会改变数组 array。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7555","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要修改的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"values (Array)","desc":" 要移除值的数组。","isNeed":true,"type":"Array","paramName":"values"}],"back":{"key":"(Array)","desc":" 返回 array。","type":"Array"},"demoCode":"var array = [1, 2, 3, 1, 2, 3];\n \n_.pullAll(array, [2, 3]);\nconsole.log(array);\n// => [1, 1]","class":"Array"},{"funcName":"pullAllBy","useAge":"_.pullAllBy(array, values, [iteratee=_.identity])","desc":"这个方法类似于 _.pullAll ，区别是这个方法接受一个 iteratee（迭代函数） 调用 array 和 values的每个值以产生一个值，通过产生的值进行了比较。iteratee 会传入一个参数： (value)。\n\nNote: 不同于 _.differenceBy, 这个方法会改变数组 array。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7585","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要修改的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"values (Array)","desc":" 要移除值的数组。","isNeed":true,"type":"Array","paramName":"values"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" iteratee（迭代器）调用每个元素。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回 array.","type":"Array"},"demoCode":"var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n \n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]","class":"Array"},{"funcName":"pullAllWith","useAge":"_.pullAllWith(array, values, [comparator])","desc":"这个方法类似于 _.pullAll，区别是这个方法接受 comparator 调用array中的元素和values比较。comparator 会传入两个参数：(arrVal, othVal)。\n\n注意: 和 _.differenceWith 不同, 这个方法会改变数组 array。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7614","version":"4.6.0","params":[{"key":"array (Array)","desc":" 要修改的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"values (Array)","desc":" 要移除值的数组。","isNeed":true,"type":"Array","paramName":"values"},{"key":"[comparator] (Function)","desc":" comparator（比较器）调用每个元素。","isNeed":false,"type":"Function","paramName":"[comparator]"}],"back":{"key":"(Array)","desc":" 返回 array。","type":"Array"},"demoCode":"var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n \n_.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]","class":"Array"},{"funcName":"pullAt","useAge":"_.pullAt(array, [indexes])","desc":"根据索引 indexes，移除array中对应的元素，并返回被移除元素的数组。\n\nNote: 和 _.at不同, 这个方法会改变数组 array。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7644","version":"3.0.0","params":[{"key":"array (Array)","desc":" 要修改的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[indexes] (...(number|number[]))","desc":" 要移除元素的索引。","isNeed":false,"type":"...(number|number[]","paramName":"[indexes]"}],"back":{"key":"(Array)","desc":" 返回移除元素组成的新数组。","type":"Array"},"demoCode":"var array = [5, 10, 15, 20];\nvar evens = _.pullAt(array, 1, 3);\n \nconsole.log(array);\n// => [5, 15]\n \nconsole.log(evens);\n// => [10, 20]","class":"Array"},{"funcName":"remove","useAge":"_.remove(array, [predicate=_.identity])","desc":"移除数组中predicate（断言）返回为真值的所有元素，并返回移除元素组成的数组。predicate（断言） 会传入3个参数： (value, index, array)。\n\nNote: 和 _.filter不同, 这个方法会改变数组 array。使用 _.pull来根据提供的value值从数组中移除元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7684","version":"2.0.0","params":[{"key":"array (Array)","desc":" 要修改的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回移除元素组成的新数组。","type":"Array"},"demoCode":"var array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n \nconsole.log(array);\n// => [1, 3]\n \nconsole.log(evens);\n// => [2, 4]","class":"Array"},{"funcName":"reverse","useAge":"_.reverse(array)","desc":"反转array，使得第一个元素变为最后一个元素，第二个元素变为倒数第二个元素，依次类推。\n\nNote: 这个方法会改变原数组 array，基于 Array#reverse.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7728","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要修改的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(Array)","desc":" 返回 array.","type":"Array"},"demoCode":"var array = [1, 2, 3];\n \n_.reverse(array);\n// => [3, 2, 1]\n \nconsole.log(array);\n// => [3, 2, 1]","class":"Array"},{"funcName":"slice","useAge":"_.slice(array, [start=0], [end=array.length])","desc":"裁剪数组array，从 start 位置开始到end结束，但不包括 end 本身的位置。\n\nNote: 这个方法用于代替 Array#slice 来确保数组正确返回。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7748","version":"3.0.0","params":[{"key":"array (Array)","desc":" 要裁剪数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[start=0] (number)","desc":" 开始位置。","isNeed":false,"type":"number","paramName":"start","initValue":"0"},{"key":"[end=array.length] (number)","desc":" 结束位置。","isNeed":false,"type":"number","paramName":"end","initValue":"array.length"}],"back":{"key":"(Array)","desc":" 返回 数组array 裁剪部分的新数组。","type":"Array"},"class":"Array"},{"funcName":"sortedIndex","useAge":"_.sortedIndex(array, value)","desc":"使用二进制的方式检索来决定 value值 应该插入到数组中 尽可能小的索引位置，以保证array的排序。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7781","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要检查的排序数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"value (*)","desc":" 要评估的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(number)","desc":" 返回 value值 应该在数组array中插入的索引位置 index。","type":"number"},"demoCode":"_.sortedIndex([30, 50], 40);\n// => 1","class":"Array"},{"funcName":"sortedIndexBy","useAge":"_.sortedIndexBy(array, value, [iteratee=_.identity])","desc":"这个方法类似 _.sortedIndex ，除了它接受一个 iteratee （迭代函数），调用每一个数组（array）元素，返回结果和value 值比较来计算排序。iteratee 会传入一个参数：(value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7811","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要检查的排序数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"value (*)","desc":" 要评估的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 迭代函数，调用每个元素。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(number)","desc":" 返回 value值 应该在数组array中插入的索引位置 index。","type":"number"},"demoCode":"var objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n \n// The `_.property` iteratee shorthand.\n_.sortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0","class":"Array"},{"funcName":"sortedIndexOf","useAge":"_.sortedIndexOf(array, value)","desc":"这个方法类似 _.indexOf，除了它是在已经排序的数组array上执行二进制检索。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7831","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要搜索的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"value (*)","desc":" 搜索的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(number)","desc":" 返回匹配值的索引位置，否则返回 -1。","type":"number"},"demoCode":"_.sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1","class":"Array"},{"funcName":"sortedLastIndex","useAge":"_.sortedLastIndex(array, value)","desc":"此方法类似于 _.sortedIndex，除了 它返回 value值 在 array 中尽可能大的索引位置（index）。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7860","version":"3.0.0","params":[{"key":"array (Array)","desc":" 要检查的排序数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"value (*)","desc":" 要评估的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(number)","desc":" 返回 value值 应该在数组array中插入的索引位置 index。","type":"number"},"demoCode":"_.sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4","class":"Array"},{"funcName":"sortedLastIndexBy","useAge":"_.sortedLastIndexBy(array, value, [iteratee=_.identity])","desc":"这个方法类似 _.sortedLastIndex ，除了它接受一个 iteratee （迭代函数），调用每一个数组（array）元素，返回结果和value 值比较来计算排序。iteratee 会传入一个参数：(value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7890","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要检查的排序数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"value (*)","desc":" 要评估的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 迭代函数，调用每个元素。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(number)","desc":" 返回 value值 应该在数组array中插入的索引位置 index。","type":"number"},"demoCode":"var objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n \n// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1","class":"Array"},{"funcName":"sortedLastIndexOf","useAge":"_.sortedLastIndexOf(array, value)","desc":"这个方法类似 _.lastIndexOf，除了它是在已经排序的数组array上执行二进制检索。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7910","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要搜索的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"value (*)","desc":" 搜索的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(number)","desc":" 返回匹配值的索引位置，否则返回 -1。","type":"number"},"demoCode":"_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3","class":"Array"},{"funcName":"sortedUniq","useAge":"_.sortedUniq(array)","desc":"这个方法类似 _.uniq，除了它会优化排序数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7936","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要检查的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(Array)","desc":" 返回一个新的不重复的数组。","type":"Array"},"demoCode":"_.sortedUniq([1, 1, 2]);\n// => [1, 2]","class":"Array"},{"funcName":"sortedUniqBy","useAge":"_.sortedUniqBy(array, [iteratee])","desc":"这个方法类似 _.uniqBy，除了它会优化排序数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7958","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要检查的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[iteratee] (Function)","desc":" 迭代函数，调用每个元素。","isNeed":false,"type":"Function","paramName":"[iteratee]"}],"back":{"key":"(Array)","desc":" 返回一个新的不重复的数组。","type":"Array"},"demoCode":"_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]","class":"Array"},{"funcName":"tail","useAge":"_.tail(array)","desc":"获取除了array数组第一个元素以外的全部元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L7978","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要检索的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(Array)","desc":" 返回 array 数组的切片（除了array数组第一个元素以外的全部元素）。","type":"Array"},"demoCode":"_.tail([1, 2, 3]);\n// => [2, 3]","class":"Array"},{"funcName":"take","useAge":"_.take(array, [n=1])","desc":"创建一个数组切片，从array数组的起始元素开始提取n个元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8008","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要检索的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[n=1] (number)","desc":" 要提取的元素个数。","isNeed":false,"type":"number","paramName":"n","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回 array 数组的切片（从起始元素开始n个元素）。","type":"Array"},"demoCode":"_.take([1, 2, 3]);\n// => [1]\n \n_.take([1, 2, 3], 2);\n// => [1, 2]\n \n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.take([1, 2, 3], 0);\n// => []","class":"Array"},{"funcName":"takeRight","useAge":"_.takeRight(array, [n=1])","desc":"创建一个数组切片，从array数组的最后一个元素开始提取n个元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8041","version":"3.0.0","params":[{"key":"array (Array)","desc":" 要检索的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[n=1] (number)","desc":" 要提取的元素个数。","isNeed":false,"type":"number","paramName":"n","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回 array 数组的切片（从结尾元素开始n个元素）。","type":"Array"},"demoCode":"_.takeRight([1, 2, 3]);\n// => [3]\n \n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n \n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.takeRight([1, 2, 3], 0);\n// => []","class":"Array"},{"funcName":"takeRightWhile","useAge":"_.takeRightWhile(array, [predicate=_.identity])","desc":"从array数组的最后一个元素开始提取元素，直到 predicate 返回假值。predicate 会传入三个参数： (value, index, array)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8087","version":"3.0.0","params":[{"key":"array (Array)","desc":" 要检索的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回 array 数组的切片。","type":"Array"},"demoCode":"var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n \n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n \n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []","class":"Array"},{"funcName":"takeWhile","useAge":"_.takeWhile(array, [predicate=_.identity])","desc":"从array数组的起始元素开始提取元素，，直到 predicate 返回假值。predicate 会传入三个参数： (value, index, array)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8129","version":"3.0.0","params":[{"key":"array (Array)","desc":" 需要处理的数组","isNeed":true,"type":"Array","paramName":"array"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回 array 数组的切片。","type":"Array"},"demoCode":"var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false},\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n \n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n \n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []","class":"Array"},{"funcName":"union","useAge":"_.union([arrays])","desc":"创建一个按顺序排列的唯一值的数组。所有给定数组的元素值使用 SameValueZero做等值比较。（ arrays（数组）的并集，按顺序返回，返回数组的元素是唯一的）","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8151","version":"0.1.0","params":[{"key":"[arrays] (...Array)","desc":" 要检查的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"}],"back":{"key":"(Array)","desc":" 返回一个新的联合数组。","type":"Array"},"demoCode":"_.union([2], [1, 2]);\n// => [2, 1]","class":"Array"},{"funcName":"unionBy","useAge":"_.unionBy([arrays], [iteratee=_.identity])","desc":"这个方法类似 _.union ，除了它接受一个 iteratee （迭代函数），调用每一个数组（array）的每个元素以产生唯一性计算的标准。iteratee 会传入一个参数：(value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8179","version":"4.0.0","params":[{"key":"[arrays] (...Array)","desc":" 要检查的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 迭代函数，调用每个元素。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回一个新的联合数组。","type":"Array"},"demoCode":"_.unionBy([2.1], [1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]","class":"Array"},{"funcName":"unionWith","useAge":"_.unionWith([arrays], [comparator])","desc":"这个方法类似 _.union， 除了它接受一个 comparator 调用比较arrays数组的每一个元素。 comparator 调用时会传入2个参数： (arrVal, othVal)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8208","version":"4.0.0","params":[{"key":"[arrays] (...Array)","desc":" 要检查的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"},{"key":"[comparator] (Function)","desc":" 比较函数，调用每个元素。","isNeed":false,"type":"Function","paramName":"[comparator]"}],"back":{"key":"(Array)","desc":" 返回一个新的联合数组。","type":"Array"},"demoCode":"var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.unionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]","class":"Array"},{"funcName":"uniq","useAge":"_.uniq(array)","desc":"创建一个去重后的array数组副本。使用了 SameValueZero 做等值比较。只有第一次出现的元素才会被保留。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8234","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要检查的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(Array)","desc":" 返回新的去重后的数组。","type":"Array"},"demoCode":"_.uniq([2, 1, 2]);\n// => [2, 1]","class":"Array"},{"funcName":"uniqBy","useAge":"_.uniqBy(array, [iteratee=_.identity])","desc":"这个方法类似 _.uniq ，除了它接受一个 iteratee （迭代函数），调用每一个数组（array）的每个元素以产生唯一性计算的标准。iteratee 调用时会传入一个参数：(value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8264","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要检查的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 迭代函数，调用每个元素。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回新的去重后的数组。","type":"Array"},"demoCode":"_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]","class":"Array"},{"funcName":"uniqWith","useAge":"_.uniqWith(array, [comparator])","desc":"这个方法类似 _.uniq， 除了它接受一个 comparator 调用比较arrays数组的每一个元素。 comparator 调用时会传入2个参数： (arrVal, othVal)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8290","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要检查的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[comparator] (Function)","desc":" 比较函数，调用每个元素。","isNeed":false,"type":"Function","paramName":"[comparator]"}],"back":{"key":"(Array)","desc":" 返回新的去重后的数组。","type":"Array"},"demoCode":"var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.uniqWith(objects, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]","class":"Array"},{"funcName":"unzip","useAge":"_.unzip(array)","desc":"这个方法类似于 _.zip，除了它接收分组元素的数组，并且创建一个数组，分组元素到打包前的结构。（返回数组的第一个元素包含所有的输入数组的第一元素，第一个元素包含了所有的输入数组的第二元素，依此类推。）","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8315","version":"1.2.0","params":[{"key":"array (Array)","desc":" 要处理的分组元素数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(Array)","desc":" 返回重组元素的新数组。","type":"Array"},"demoCode":"var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n// => [['fred', 30, true], ['barney', 40, false]]\n \n_.unzip(zipped);\n// => [['fred', 'barney'], [30, 40], [true, false]]","class":"Array"},{"funcName":"unzipWith","useAge":"_.unzipWith(array, [iteratee=_.identity])","desc":"此方法类似于 _.unzip，除了它接受一个iteratee指定重组值应该如何被组合。iteratee 调用时会传入每个分组的值： (...group)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8352","version":"3.8.0","params":[{"key":"array (Array)","desc":" 要处理的分组元素数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[iteratee=_.identity] (Function)","desc":" 这个函数用来组合重组的值。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回重组元素的新数组。","type":"Array"},"demoCode":"var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n \n_.unzipWith(zipped, _.add);\n// => [3, 30, 300]","class":"Array"},{"funcName":"without","useAge":"_.without(array, [values])","desc":"创建一个剔除所有给定值的新数组，剔除值的时候，使用 SameValueZero做相等比较。\n\n注意: 不像 _.pull, 这个方法会返回一个新数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8385","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要检查的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[values] (...*)","desc":" 要剔除的值。","isNeed":false,"type":"...*","paramName":"[values]"}],"back":{"key":"(Array)","desc":" 返回过滤值后的新数组。","type":"Array"},"demoCode":"_.without([2, 1, 2, 3], 1, 2);\n// => [3]","class":"Array"},{"funcName":"xor","useAge":"_.xor([arrays])","desc":"创建一个给定数组唯一值的数组，使用 symmetric difference做等值比较。返回值的顺序取决于他们数组的出现顺序。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8409","version":"2.4.0","params":[{"key":"[arrays] (...Array)","desc":" 要检查的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"}],"back":{"key":"(Array)","desc":" 返回过滤值后的新数组。","type":"Array"},"demoCode":"_.xor([2, 1], [2, 3]);\n// => [1, 3]","class":"Array"},{"funcName":"xorBy","useAge":"_.xorBy([arrays], [iteratee=_.identity])","desc":"这个方法类似 _.xor ，除了它接受 iteratee（迭代器），这个迭代器 调用每一个 arrays（数组）的每一个值，以生成比较的新值。iteratee 调用一个参数： (value).","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8437","version":"4.0.0","params":[{"key":"[arrays] (...Array)","desc":" 要检查的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 调用每一个元素的迭代函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回过滤值后的新数组。","type":"Array"},"demoCode":"_.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2, 3.4]\n \n// The `_.property` iteratee shorthand.\n_.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 2 }]","class":"Array"},{"funcName":"xorWith","useAge":"_.xorWith([arrays], [comparator])","desc":"该方法是像 _.xor，除了它接受一个 comparator ，以调用比较数组的元素。 comparator 调用2个参数：(arrVal, othVal).","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8466","version":"4.0.0","params":[{"key":"[arrays] (...Array)","desc":" 要检查的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"},{"key":"[comparator] (Function)","desc":" 调用每一个元素的比较函数。","isNeed":false,"type":"Function","paramName":"[comparator]"}],"back":{"key":"(Array)","desc":" 返回过滤值后的新数组。","type":"Array"},"demoCode":"var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.xorWith(objects, others, _.isEqual);\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]","class":"Array"},{"funcName":"zip","useAge":"_.zip([arrays])","desc":"创建一个分组元素的数组，数组的第一个元素包含所有给定数组的第一个元素，数组的第二个元素包含所有给定数组的第二个元素，以此类推。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8490","version":"0.1.0","params":[{"key":"[arrays] (...Array)","desc":" 要处理的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"}],"back":{"key":"(Array)","desc":" 返回分组元素的新数组。","type":"Array"},"demoCode":"_.zip(['fred', 'barney'], [30, 40], [true, false]);\n// => [['fred', 30, true], ['barney', 40, false]]","class":"Array"},{"funcName":"zipObject","useAge":"_.zipObject([props=[]], [values=[]])","desc":"这个方法类似 _.fromPairs，除了它接受2个数组，第一个数组中的值作为属性标识符（属性名），第二个数组中的值作为相应的属性值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8508","version":"0.4.0","params":[{"key":"[props=[]] (Array)","desc":" The property identifiers.","isNeed":false,"type":"Array","paramName":"props","initValue":"[]"},{"key":"[values=[]] (Array)","desc":" The property values.","isNeed":false,"type":"Array","paramName":"values","initValue":"[]"}],"back":{"key":"(Object)","desc":" Returns the new object.","type":"Object"},"demoCode":"_.zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }","class":"Array"},{"funcName":"zipObjectDeep","useAge":"_.zipObjectDeep([props=[]], [values=[]])","desc":"这个方法类似 _.zipObject，除了它支持属性路径。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8527","version":"4.1.0","params":[{"key":"[props=[]] (Array)","desc":" 属性标识符（属性名）。","isNeed":false,"type":"Array","paramName":"props","initValue":"[]"},{"key":"[values=[]] (Array)","desc":" 属性值。","isNeed":false,"type":"Array","paramName":"values","initValue":"[]"}],"back":{"key":"(Object)","desc":" 返回新对象。","type":"Object"},"demoCode":"_.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }","class":"Array"},{"funcName":"zipWith","useAge":"_.zipWith([arrays], [iteratee=_.identity])","desc":"这个方法类似于 _.zip，不同之处在于它接受一个 iteratee（迭代函数），来 指定分组的值应该如何被组合。 该iteratee调用每个组的元素： (...group).","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8550","version":"3.8.0","params":[{"key":"[arrays] (...Array)","desc":" 要处理的数组。","isNeed":false,"type":"...Array","paramName":"[arrays]"},{"key":"[iteratee=_.identity] (Function)","desc":" 函数用来组合分组的值。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回分组元素的新数组。","type":"Array"},"demoCode":"_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n  return a + b + c;\n});\n// => [111, 222]","class":"Array"},{"funcName":"countBy","useAge":"_.countBy(collection, [iteratee=_.identity])","desc":"创建一个组成对象，key（键）是经过 iteratee（迭代函数） 执行处理collection中每个元素后返回的结果，每个key（键）对应的值是 iteratee（迭代函数）返回该key（键）的次数（迭代次数）。 iteratee 调用一个参数：(value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8930","version":"0.5.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 一个迭代函数，用来转换key（键）。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回一个组成集合对象。","type":"Object"},"demoCode":"_.countBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': 1, '6': 2 }\n \n// The `_.property` iteratee shorthand.\n_.countBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }","class":"Collection"},{"funcName":"every","useAge":"_.every(collection, [predicate=_.identity])","desc":"通过 predicate（断言函数） 检查 collection（集合）中的 所有 元素是否都返回真值。一旦 predicate（断言函数） 返回假值，迭代就马上停止。predicate（断言函数）调用三个参数： (value, index|key, collection)。\n\n注意: 这个方法对于对于 空集合返回 true，因为空集合的 任何元素都是 true 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8980","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(boolean)","desc":" 如果所有元素经 predicate（断言函数） 检查后都都返回真值，那么就返回true，否则返回 false 。","type":"boolean"},"demoCode":"_.every([true, 1, null, 'yes'], Boolean);\n// => false\n \nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n \n// The `_.matches` iteratee shorthand.\n_.every(users, { 'user': 'barney', 'active': false });\n// => false\n \n// The `_.matchesProperty` iteratee shorthand.\n_.every(users, ['active', false]);\n// => true\n \n// The `_.property` iteratee shorthand.\n_.every(users, 'active');\n// => false","class":"Collection"},{"funcName":"filter","useAge":"_.filter(collection, [predicate=_.identity])","desc":"遍历 collection（集合）元素，返回 predicate（断言函数）返回真值 的所有元素的数组。 predicate（断言函数）调用三个参数：(value, index|key, collection)。\n\nNote: Unlike _.remove, this method returns a new array.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9026","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回一个新的过滤后的数组。","type":"Array"},"demoCode":"var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n \n_.filter(users, function(o) { return !o.active; });\n// => objects for ['fred']\n \n// The `_.matches` iteratee shorthand.\n_.filter(users, { 'age': 36, 'active': true });\n// => objects for ['barney']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, ['active', false]);\n// => objects for ['fred']\n \n// The `_.property` iteratee shorthand.\n_.filter(users, 'active');\n// => objects for ['barney']","class":"Collection"},{"funcName":"find","useAge":"_.find(collection, [predicate=_.identity], [fromIndex=0])","desc":"遍历 collection（集合）元素，返回 predicate（断言函数）第一个返回真值的第一个元素。predicate（断言函数）调用3个参数： (value, index|key, collection)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9068","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"},{"key":"[fromIndex=0] (number)","desc":" 开始搜索的索引位置。","isNeed":false,"type":"number","paramName":"fromIndex","initValue":"0"}],"back":{"key":"(*)","desc":" 返回匹配元素，否则返回 undefined。","type":"*"},"demoCode":"var users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n];\n \n_.find(users, function(o) { return o.age < 40; });\n// => object for 'barney'\n \n// The `_.matches` iteratee shorthand.\n_.find(users, { 'age': 1, 'active': true });\n// => object for 'pebbles'\n \n// The `_.matchesProperty` iteratee shorthand.\n_.find(users, ['active', false]);\n// => object for 'fred'\n \n// The `_.property` iteratee shorthand.\n_.find(users, 'active');\n// => object for 'barney'","class":"Collection"},{"funcName":"findLast","useAge":"_.findLast(collection, [predicate=_.identity], [fromIndex=collection.length-1])","desc":"这个方法类似 _.find ，不同之处在于， _.findLast是从右至左遍历collection （集合）元素的。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9090","version":"2.0.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"},{"key":"[fromIndex=collection.length-1] (number)","desc":" 开始搜索的索引位置。","isNeed":false,"type":"number","paramName":"fromIndex","initValue":"collection.length-1"}],"back":{"key":"(*)","desc":" 返回匹配元素，否则返回 undefined。","type":"*"},"demoCode":"_.findLast([1, 2, 3, 4], function(n) {\n  return n % 2 == 1;\n});\n// => 3","class":"Collection"},{"funcName":"flatMap","useAge":"_.flatMap(collection, [iteratee=_.identity])","desc":"创建一个扁平化（同阶数组）的数组，这个数组的值来自collection（集合）中的每一个值经过 iteratee（迭代函数） 处理后返回的结果，并且扁平化合并。 iteratee 调用三个参数： (value, index|key, collection)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9114","version":"4.0.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代遍历的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回新扁平化数组。","type":"Array"},"demoCode":"function duplicate(n) {\n  return [n, n];\n}\n \n_.flatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]","class":"Collection"},{"funcName":"flatMapDeep","useAge":"_.flatMapDeep(collection, [iteratee=_.identity])","desc":"这个方法类似 _.flatMap 不同之处在于， _.flatMapDeep 会继续扁平化递归映射的结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9139","version":"4.7.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回新扁平化数组。","type":"Array"},"demoCode":"function duplicate(n) {\n  return [[[n, n]]];\n}\n \n_.flatMapDeep([1, 2], duplicate);\n// => [1, 1, 2, 2]","class":"Collection"},{"funcName":"flatMapDepth","useAge":"_.flatMapDepth(collection, [iteratee=_.identity], [depth=1])","desc":"该方法类似 _.flatMap，不同之处在于， _.flatMapDepth 会根据指定的 depth（递归深度）继续扁平化递归映射结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9165","version":"4.7.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"},{"key":"[depth=1] (number)","desc":" 最大递归深度。","isNeed":false,"type":"number","paramName":"depth","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回新扁平化数组。","type":"Array"},"demoCode":"function duplicate(n) {\n  return [[[n, n]]];\n}\n \n_.flatMapDepth([1, 2], duplicate, 2);\n// => [[1, 1], [2, 2]]","class":"Collection"},{"funcName":"forEach","useAge":"_.forEach(collection, [iteratee=_.identity])","aliasFuncName":"_.each","desc":"调用 iteratee 遍历 collection(集合) 中的每个元素， iteratee 调用3个参数： (value, index|key, collection)。 如果迭代函数（iteratee）显式的返回 false ，迭代会提前退出。\n\n注意: 与其他\"集合\"方法一样，类似于数组，对象的 \"length\" 属性也会被遍历。想避免这种情况，可以用 _.forIn 或者 _.forOwn 代替。添加版本","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9200","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代调用的函数。"}],"back":{"key":"(*)","desc":" 返回集合 collection。","type":"*"},"demoCode":"_([1, 2]).forEach(function(value) {\n  console.log(value);\n});\n// => Logs `1` then `2`.\n \n_.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed).","class":"Collection"},{"funcName":"forEachRight","useAge":"_.forEachRight(collection, [iteratee=_.identity])","aliasFuncName":"_.eachRight","desc":"这个方法类似 _.forEach，不同之处在于， _.forEachRight 是从右到左遍历集合中每一个元素的。添加版本","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9225","version":"2.0.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代调用的函数。"}],"back":{"key":"(*)","desc":" 返回集合 collection。","type":"*"},"demoCode":"_.forEachRight([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `2` then `1`.","class":"Collection"},{"funcName":"groupBy","useAge":"_.groupBy(collection, [iteratee=_.identity])","desc":"创建一个对象，key 是 iteratee 遍历 collection(集合) 中的每个元素返回的结果。 分组值的顺序是由他们出现在 collection(集合) 中的顺序确定的。每个键对应的值负责生成 key 的元素组成的数组。iteratee 调用 1 个参数： (value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9254","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 一个用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 这个迭代函数用来转换key。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回一个组成聚合的对象。","type":"Object"},"demoCode":"_.groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n \n// The `_.property` iteratee shorthand.\n_.groupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }","class":"Collection"},{"funcName":"includes","useAge":"_.includes(collection, value, [fromIndex=0])","desc":"检查 value(值) 是否在 collection(集合) 中。如果 collection(集合)是一个字符串，那么检查 value（值，子字符串） 是否在字符串中， 否则使用 SameValueZero 做等值比较。 如果指定 fromIndex 是负数，那么从 collection(集合) 的结尾开始检索。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9292","version":"0.1.0","params":[{"key":"collection (Array|Object|string)","desc":" 要检索的集合。","isNeed":true,"type":"Array|Object|string","paramName":"collection"},{"key":"value (*)","desc":" 要检索的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[fromIndex=0] (number)","desc":" 要检索的 索引位置。","isNeed":false,"type":"number","paramName":"fromIndex","initValue":"0"}],"back":{"key":"(boolean)","desc":" 如果找到 value 返回 true， 否则返回 false。","type":"boolean"},"demoCode":"_.includes([1, 2, 3], 1);\n// => true\n \n_.includes([1, 2, 3], 1, 2);\n// => false\n \n_.includes({ 'user': 'fred', 'age': 40 }, 'fred');\n// => true\n \n_.includes('pebbles', 'eb');\n// => true","class":"Collection"},{"funcName":"invokeMap","useAge":"_.invokeMap(collection, path, [args])","desc":"调用path（路径）上的方法处理 collection(集合)中的每个元素，返回一个数组，包含每次调用方法得到的结果。任何附加的参数提供给每个被调用的方法。如果methodName（方法名）是一个函数，每次调用函数时，内部的 this 指向集合中的每个元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9328","version":"4.0.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"path (Array|Function|string)","desc":" 用来调用方法的路径 或 者每次迭代调用的函数。","isNeed":true,"type":"Array|Function|string","paramName":"path"},{"key":"[args] (...*)","desc":" 调用每个方法的参数。","isNeed":false,"type":"...*","paramName":"[args]"}],"back":{"key":"(Array)","desc":" 返回的结果数组。","type":"Array"},"demoCode":"_.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n \n_.invokeMap([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]","class":"Collection"},{"funcName":"keyBy","useAge":"_.keyBy(collection, [iteratee=_.identity])","desc":"创建一个对象组成， key（键） 是 collection（集合）中的每个元素经过 iteratee（迭代函数） 处理后返回的结果。 每个 key（键）对应的值是生成key（键）的最后一个元素。iteratee（迭代函数）调用1个参数：(value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9370","version":"4.0.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 这个迭代函数用来转换key。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回一个组成聚合的对象。","type":"Object"},"demoCode":"var array = [\n  { 'dir': 'left', 'code': 97 },\n  { 'dir': 'right', 'code': 100 }\n];\n \n_.keyBy(array, function(o) {\n  return String.fromCharCode(o.code);\n});\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n \n_.keyBy(array, 'dir');\n// => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }","class":"Collection"},{"funcName":"map","useAge":"_.map(collection, [iteratee=_.identity])","desc":"创建一个数组， value（值） 是 iteratee（迭代函数）遍历 collection（集合）中的每个元素后返回的结果。 iteratee（迭代函数）调用3个参数：\n(value, index|key, collection).\n\nlodash 中有许多方法是防止作为其他方法的迭代函数（即不能作为iteratee参数传递给其他方法），例如： _.every, _.filter, _.map, _.mapValues, _.reject, 和 _.some。\n\n受保护的方法有（即这些方法不能使用 _.every, _.filter, _.map, _.mapValues, _.reject, 和 _.some作为 iteratee 迭代函数参数） ：\nary, chunk, curry, curryRight, drop, dropRight, every, fill, invert, parseInt, random, range, rangeRight, repeat, sampleSize, slice, some, sortBy, split, take, takeRight, template, trim, trimEnd, trimStart, and words","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9416","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratee=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回新的映射后数组。","type":"Array"},"demoCode":"function square(n) {\n  return n * n;\n}\n \n_.map([4, 8], square);\n// => [16, 64]\n \n_.map({ 'a': 4, 'b': 8 }, square);\n// => [16, 64] (iteration order is not guaranteed)\n \nvar users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n \n// The `_.property` iteratee shorthand.\n_.map(users, 'user');\n// => ['barney', 'fred']","class":"Collection"},{"funcName":"orderBy","useAge":"_.orderBy(collection, [iteratees=[_.identity]], [orders])","desc":"此方法类似于 _.sortBy，除了它允许指定 iteratee（迭代函数）结果如何排序。 如果没指定 orders（排序），所有值以升序排序。 否则，指定为\"desc\" 降序，或者指定为 \"asc\" 升序，排序对应值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9450","version":"4.0.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratees=[_.identity]] (Array[]|Function[]|Object[]|string[])","desc":" 排序的迭代函数。","isNeed":false,"type":"Array[]|Function[]|Object[]|string[]","paramName":"iteratees","initValue":"[_.identity]"},{"key":"[orders] (string[])","desc":" iteratees迭代函数的排序顺序。","isNeed":false,"type":"string[]","paramName":"[orders]"}],"back":{"key":"(Array)","desc":" 排序排序后的新数组。","type":"Array"},"demoCode":"var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 34 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n];\n \n// 以 `user` 升序排序 再  `age` 以降序排序。\n_.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]","class":"Collection"},{"funcName":"partition","useAge":"_.partition(collection, [predicate=_.identity])","desc":"创建一个分成两组的元素数组，第一组包含predicate（断言函数）返回为 truthy（真值）的元素，第二组包含predicate（断言函数）返回为 falsey（假值）的元素。predicate 调用1个参数：(value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9500","version":"3.0.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回元素分组后的数组。","type":"Array"},"demoCode":"var users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n \n_.partition(users, function(o) { return o.active; });\n// => objects for [['fred'], ['barney', 'pebbles']]\n \n// The `_.matches` iteratee shorthand.\n_.partition(users, { 'age': 1, 'active': false });\n// => objects for [['pebbles'], ['barney', 'fred']]\n \n// The `_.matchesProperty` iteratee shorthand.\n_.partition(users, ['active', false]);\n// => objects for [['barney', 'pebbles'], ['fred']]\n \n// The `_.property` iteratee shorthand.\n_.partition(users, 'active');\n// => objects for [['fred'], ['barney', 'pebbles']]","class":"Collection"},{"funcName":"reduce","useAge":"_.reduce(collection, [iteratee=_.identity], [accumulator])","desc":"压缩 collection（集合）为一个值，通过 iteratee（迭代函数）遍历 collection（集合）中的每个元素，每次返回的值会作为下一次迭代使用(作为iteratee（迭代函数）的第一个参数使用)。 如果没有提供 accumulator，则 collection（集合）中的第一个元素作为初始值。(accumulator参数在第一次迭代的时候作为iteratee（迭代函数）第一个参数使用。) iteratee 调用4个参数：\n(accumulator, value, index|key, collection).\n\nlodash 中有许多方法是防止作为其他方法的迭代函数（即不能作为iteratee参数传递给其他方法），例如： _.reduce, _.reduceRight, 和 _.transform。\n\n受保护的方法有（即这些方法不能使用 _.reduce, _.reduceRight, 和 _.transform作为 iteratee 迭代函数参数）：\nassign, defaults, defaultsDeep, includes, merge, orderBy, 和 sortBy","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9541","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"},{"key":"[accumulator] (*)","desc":" 初始值。","isNeed":false,"type":"*","paramName":"[accumulator]"}],"back":{"key":"(*)","desc":" 返回累加后的值。","type":"*"},"demoCode":"_.reduce([1, 2], function(sum, n) {\n  return sum + n;\n}, 0);\n// => 3\n \n_.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n  return result;\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] } (无法保证遍历的顺序)","class":"Collection"},{"funcName":"reduceRight","useAge":"_.reduceRight(collection, [iteratee=_.identity], [accumulator])","desc":"这个方法类似 _.reduce ，除了它是从右到左遍历collection（集合）中的元素的。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9570","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"},{"key":"[accumulator] (*)","desc":" 初始值。","isNeed":false,"type":"*","paramName":"[accumulator]"}],"back":{"key":"(*)","desc":" 返回累加后的值。","type":"*"},"demoCode":"var array = [[0, 1], [2, 3], [4, 5]];\n \n_.reduceRight(array, function(flattened, other) {\n  return flattened.concat(other);\n}, []);\n// => [4, 5, 2, 3, 0, 1]","class":"Collection"},{"funcName":"reject","useAge":"_.reject(collection, [predicate=_.identity])","desc":"_.filter的反向方法;此方法 返回 predicate（断言函数） 不 返回 truthy（真值）的collection（集合）元素（注：非真）。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9611","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回过滤后的新数组","type":"Array"},"demoCode":"var users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n \n_.reject(users, function(o) { return !o.active; });\n// => objects for ['fred']\n \n// `_.matches` 迭代简写\n_.reject(users, { 'age': 40, 'active': true });\n// => objects for ['barney']\n \n// `_.matchesProperty` 迭代简写\n_.reject(users, ['active', false]);\n// => objects for ['fred']\n \n// `_.property` 迭代简写\n_.reject(users, 'active');\n// => objects for ['barney']","class":"Collection"},{"funcName":"sample","useAge":"_.sample(collection)","desc":"从collection（集合）中获得一个随机元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9630","version":"2.0.0","params":[{"key":"collection (Array|Object)","desc":" 要取样的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"}],"back":{"key":"(*)","desc":" 返回随机元素。","type":"*"},"demoCode":"_.sample([1, 2, 3, 4]);\n// => 2","class":"Collection"},{"funcName":"sampleSize","useAge":"_.sampleSize(collection, [n=1])","desc":"从collection（集合）中获得 n 个随机元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9654","version":"4.0.0","params":[{"key":"collection (Array|Object)","desc":" 要取样的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[n=1] (number)","desc":" 取样的元素个数。","isNeed":false,"type":"number","paramName":"n","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回随机元素。","type":"Array"},"demoCode":"_.sampleSize([1, 2, 3], 2);\n// => [3, 1]\n \n_.sampleSize([1, 2, 3], 4);\n// => [2, 3, 1]","class":"Collection"},{"funcName":"shuffle","useAge":"_.shuffle(collection)","desc":"创建一个被打乱值的集合。 使用 Fisher-Yates shuffle 版本。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9678","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 要打乱的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"}],"back":{"key":"(Array)","desc":" 返回打乱的新数组。","type":"Array"},"demoCode":"_.shuffle([1, 2, 3, 4]);\n// => [4, 1, 3, 2]","class":"Collection"},{"funcName":"size","useAge":"_.size(collection)","desc":"返回collection（集合）的长度，如果集合是类数组或字符串，返回其 length ；如果集合是对象，返回其可枚举属性的个数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9706","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 要检查的集合","isNeed":true,"type":"Array|Object","paramName":"collection"}],"back":{"key":"(number)","desc":" 返回集合的长度。","type":"number"},"demoCode":"_.size([1, 2, 3]);\n// => 3\n \n_.size({ 'a': 1, 'b': 2 });\n// => 2\n \n_.size('pebbles');\n// => 7","class":"Collection"},{"funcName":"some","useAge":"_.some(collection, [predicate=_.identity])","desc":"通过 predicate（断言函数） 检查collection（集合）中的元素是否存在 任意 truthy（真值）的元素，一旦 predicate（断言函数） 返回 truthy（真值），遍历就停止。 predicate 调用3个参数：(value, index|key, collection)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9756","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[predicate=_.identity] (Array|Function|Object|string)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Array|Function|Object|string","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(boolean)","desc":" 如果任意元素经 predicate 检查都为 truthy（真值），返回 true ，否则返回 false 。","type":"boolean"},"demoCode":"_.some([null, 0, 'yes', false], Boolean);\n// => true\n \nvar users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\n \n// The `_.matches` iteratee shorthand.\n_.some(users, { 'user': 'barney', 'active': false });\n// => false\n \n// The `_.matchesProperty` iteratee shorthand.\n_.some(users, ['active', false]);\n// => true\n \n// The `_.property` iteratee shorthand.\n_.some(users, 'active');\n// => true","class":"Collection"},{"funcName":"sortBy","useAge":"_.sortBy(collection, [iteratees=[_.identity]])","desc":"创建一个元素数组。 以 iteratee 处理的结果升序排序。 这个方法执行稳定排序，也就是说相同元素会保持原始排序。 iteratees 调用1个参数： (value)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9793","version":"0.1.0","params":[{"key":"collection (Array|Object)","desc":" 用来迭代的集合。","isNeed":true,"type":"Array|Object","paramName":"collection"},{"key":"[iteratees=[_.identity]] (...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[]))","desc":" 这个函数决定排序。","isNeed":false,"type":"...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[]","paramName":"iteratees","initValue":"[_.identity]"}],"back":{"key":"(Array)","desc":" 返回排序后的数组。","type":"Array"},"demoCode":"var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 34 }\n];\n \n_.sortBy(users, function(o) { return o.user; });\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n \n_.sortBy(users, ['user', 'age']);\n// => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n \n_.sortBy(users, 'user', function(o) {\n  return Math.floor(o.age / 10);\n});\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]","class":"Collection"},{"funcName":"now","useAge":"_.now()","desc":"获得 Unix 纪元 (1 January 1970 00:00:00 UTC) 直到现在的毫秒数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9824","version":"2.4.0","params":[],"back":{"key":"_.defer(function(stamp) {\n  console.log(_.now() - stamp);\n}, _.now());\n// => 记录延迟函数调用的毫秒数","type":".defer(function(stamp) {\n  console.log(_.now() - stamp);\n}, _.now());\n// => 记录延迟函数调用的毫秒"},"class":"Date"},{"funcName":"after","useAge":"_.after(n, func)","desc":"_.before的反向函数;此方法创建一个函数，当他被调用n或更多次之后将马上触发func 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9854","version":"0.1.0","params":[{"key":"n (number)","desc":" func 方法应该在调用多少次后才执行。","isNeed":true,"type":"number","paramName":"n"},{"key":"func (Function)","desc":" 用来限定的函数。","isNeed":true,"type":"Function","paramName":"func"}],"back":{"key":"(Function)","desc":" 返回新的限定函数。","type":"Function"},"demoCode":"var saves = ['profile', 'settings'];\n \nvar done = _.after(saves.length, function() {\n  console.log('done saving!');\n});\n \n_.forEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => Logs 'done saving!' after the two async saves have completed.","class":"Function"},{"funcName":"ary","useAge":"_.ary(func, [n=func.length])","desc":"创建一个调用func的函数。调用func时最多接受 n个参数，忽略多出的参数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9883","version":"3.0.0","params":[{"key":"func (Function)","desc":" 需要被限制参数个数的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[n=func.length] (number)","desc":" 限制的参数数量。","isNeed":false,"type":"number","paramName":"n","initValue":"func.length"}],"back":{"key":"(Function)","desc":" 返回新的覆盖函数。","type":"Function"},"demoCode":"_.map(['6', '8', '10'], _.ary(parseInt, 1));\n// => [6, 8, 10]","class":"Function"},{"funcName":"before","useAge":"_.before(n, func)","desc":"创建一个调用func的函数，通过this绑定和创建函数的参数调用func，调用次数不超过 n 次。 之后再调用这个函数，将返回一次最后调用func的结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9906","version":"3.0.0","params":[{"key":"n (number)","desc":" 超过多少次不再调用func（限制调用func 的次数）。","isNeed":true,"type":"number","paramName":"n"},{"key":"func (Function)","desc":" 限制执行的函数。","isNeed":true,"type":"Function","paramName":"func"}],"back":{"key":"(Function)","desc":" 返回新的限定函数。","type":"Function"},"demoCode":"jQuery(element).on('click', _.before(5, addContactToList));\n// => allows adding up to 4 contacts to the list","class":"Function"},{"funcName":"bind","useAge":"_.bind(func, thisArg, [partials])","desc":"创建一个调用func的函数，thisArg绑定func函数中的 this (this的上下文为thisArg) ，并且func函数会接收partials附加参数。\n\n_.bind.placeholder值，默认是以 _ 作为附加部分参数的占位符。\n\n注意: 不同于原生的 Function#bind，这个方法不会设置绑定函数的 \"length\" 属性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L9958","version":"0.1.0","params":[{"key":"func (Function)","desc":" 绑定的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"thisArg (*)","desc":" func 绑定的this对象。","isNeed":true,"type":"*","paramName":"thisArg"},{"key":"[partials] (...*)","desc":" 附加的部分参数。","isNeed":false,"type":"...*","paramName":"[partials]"}],"back":{"key":"(Function)","desc":" 返回新的绑定函数。","type":"Function"},"demoCode":"var greet = function(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n};\n \nvar object = { 'user': 'fred' };\n \nvar bound = _.bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n \n// Bound with placeholders.\nvar bound = _.bind(greet, object, _, '!');\nbound('hi');\n// => 'hi fred!'","class":"Function"},{"funcName":"bindKey","useAge":"_.bindKey(object, key, [partials])","desc":"创建一个函数,在object[key]上通过接收partials附加参数，调用这个方法。\n\n这个方法与 _.bind 的不同之处在于允许重新定义绑定函数即使它还不存在。 浏览 Peter Michaux's article 了解更多详情。\n\n_.bind.placeholder值，默认是以 _ 作为附加部分参数的占位符。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10012","version":"0.10.0","params":[{"key":"object (Object)","desc":" 需要绑定函数的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"key (string)","desc":" 需要绑定函数对象的键。","isNeed":true,"type":"string","paramName":"key"},{"key":"[partials] (...*)","desc":" 附加的部分参数。","isNeed":false,"type":"...*","paramName":"[partials]"}],"back":{"key":"(Function)","desc":" 返回新的绑定函数。","type":"Function"},"demoCode":"var object = {\n  'user': 'fred',\n  'greet': function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\n \nvar bound = _.bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n \nobject.greet = function(greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n \nbound('!');\n// => 'hiya fred!'\n \n// Bound with placeholders.\nvar bound = _.bindKey(object, 'greet', _, '!');\nbound('hi');\n// => 'hiya fred!'","class":"Function"},{"funcName":"curry","useAge":"_.curry(func, [arity=func.length])","desc":"创建一个函数，该函数接收 func 的参数，要么调用func返回的结果，如果 func 所需参数已经提供，则直接返回 func 所执行的结果。或返回一个函数，接受余下的func 参数的函数，可以使用 func.length 强制需要累积的参数个数。\n\n_.curry.placeholder值，默认是以 _ 作为附加部分参数的占位符。\n\nNote: 这个方法不会设置 curried 函数的 \"length\" 属性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10062","version":"2.0.0","params":[{"key":"func (Function)","desc":" 用来柯里化（curry）的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[arity=func.length] (number)","desc":" 需要提供给 func 的参数数量。","isNeed":false,"type":"number","paramName":"arity","initValue":"func.length"}],"back":{"key":"(Function)","desc":" 返回新的柯里化（curry）函数。","type":"Function"},"demoCode":"var abc = function(a, b, c) {\n  return [a, b, c];\n};\n \nvar curried = _.curry(abc);\n \ncurried(1)(2)(3);\n// => [1, 2, 3]\n \ncurried(1, 2)(3);\n// => [1, 2, 3]\n \ncurried(1, 2, 3);\n// => [1, 2, 3]\n \n// Curried with placeholders.\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]","class":"Function"},{"funcName":"curryRight","useAge":"_.curryRight(func, [arity=func.length])","desc":"这个方法类似 _.curry。 除了它接受参数的方式用 _.partialRight 代替了 _.partial。\n\n_.curryRight.placeholder值，默认是以 _ 作为附加部分参数的占位符。\n\nNote: 这个方法不会设置 curried 函数的 \"length\" 属性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10107","version":"3.0.0","params":[{"key":"func (Function)","desc":" 用来柯里化（curry）的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[arity=func.length] (number)","desc":" 需要提供给 func 的参数数量。","isNeed":false,"type":"number","paramName":"arity","initValue":"func.length"}],"back":{"key":"(Function)","desc":" 返回新的柯里化（curry）函数。","type":"Function"},"demoCode":"var abc = function(a, b, c) {\n  return [a, b, c];\n};\n \nvar curried = _.curryRight(abc);\n \ncurried(3)(2)(1);\n// => [1, 2, 3]\n \ncurried(2, 3)(1);\n// => [1, 2, 3]\n \ncurried(1, 2, 3);\n// => [1, 2, 3]\n \n// Curried with placeholders.\ncurried(3)(1, _)(2);\n// => [1, 2, 3]","class":"Function"},{"funcName":"debounce","useAge":"_.debounce(func, [wait=0], [options={}])","desc":"创建一个 debounced（防抖动）函数，该函数会从上一次被调用后，延迟 wait 毫秒后调用 func 方法。 debounced（防抖动）函数提供一个 cancel 方法取消延迟的函数调用以及 flush 方法立即调用。 可以提供一个 options（选项） 对象决定如何调用 func 方法，options.leading 与|或 options.trailing 决定延迟前后如何触发（是 先调用后等待 还是 先等待后调用）。 func 调用时会传入最后一次提供给 debounced（防抖动）函数 的参数。 后续调用的 debounced（防抖动）函数返回是最后一次 func 调用的结果。\n\n注意: 如果 leading 和 trailing 选项为 true, 则 func 允许 trailing 方式调用的条件为: 在 wait 期间多次调用防抖方法。\n\n如果 wait 为 0 并且 leading 为 false, func调用将被推迟到下一个点，类似setTimeout为0的超时。\n\nSee David Corbacho's article for details over the differences between _.debounce and _.throttle.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10168","version":"0.1.0","params":[{"key":"func (Function)","desc":" 要防抖动的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[wait=0] (number)","desc":" 需要延迟的毫秒数。","isNeed":false,"type":"number","paramName":"wait","initValue":"0"},{"key":"[options={}] (Object)","desc":" 选项对象。","isNeed":false,"type":"Object","paramName":"options","initValue":"{}"},{"key":"[options.leading=false] (boolean)","desc":" 指定在延迟开始前调用。","isNeed":false,"type":"boolean","paramName":"options.leading","initValue":"false"},{"key":"[options.maxWait] (number)","desc":" 设置 func 允许被延迟的最大值。","isNeed":false,"type":"number","paramName":"[options.maxWait]"},{"key":"[options.trailing=true] (boolean)","desc":" 指定在延迟结束后调用。","isNeed":false,"type":"boolean","paramName":"options.trailing","initValue":"true"}],"back":{"key":"(Function)","desc":" 返回新的 debounced（防抖动）函数。","type":"Function"},"demoCode":"// 避免窗口在变动时出现昂贵的计算开销。\njQuery(window).on('resize', _.debounce(calculateLayout, 150));\n \n// 当点击时 `sendMail` 随后就被调用。\njQuery(element).on('click', _.debounce(sendMail, 300, {\n  'leading': true,\n  'trailing': false\n}));\n \n// 确保 `batchLog` 调用1次之后，1秒内会被触发。\nvar debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\nvar source = new EventSource('/stream');\njQuery(source).on('message', debounced);\n \n// 取消一个 trailing 的防抖动调用\njQuery(window).on('popstate', debounced.cancel);","class":"Function"},{"funcName":"defer","useAge":"_.defer(func, [args])","desc":"推迟调用func，直到当前堆栈清理完毕。 调用时，任何附加的参数会传给func。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10308","version":"0.1.0","params":[{"key":"func (Function)","desc":" 要延迟的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[args] (...*)","desc":" 会在调用时传给 func 的参数。","isNeed":false,"type":"...*","paramName":"[args]"}],"back":{"key":"(number)","desc":"返回计时器 id。","type":"number"},"demoCode":"_.defer(function(text) {\n  console.log(text);\n}, 'deferred');\n// => 一毫秒或更久一些输出 'deferred'。","class":"Function"},{"funcName":"delay","useAge":"_.delay(func, wait, [args])","desc":"延迟 wait 毫秒后调用 func。 调用时，任何附加的参数会传给func。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10331","version":"0.1.0","params":[{"key":"func (Function)","desc":" 要延迟的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"wait (number)","desc":" 要延迟的毫秒数。","isNeed":true,"type":"number","paramName":"wait"},{"key":"[args] (...*)","desc":" 会在调用时传入到 func 的参数。","isNeed":false,"type":"...*","paramName":"[args]"}],"back":{"key":"(number)","desc":" 返回计时器 id","type":"number"},"demoCode":"_.delay(function(text) {\n  console.log(text);\n}, 1000, 'later');\n// => 一秒后输出 'later'。","class":"Function"},{"funcName":"flip","useAge":"_.flip(func)","desc":"创建一个函数，调用func时候接收翻转的参数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10353","version":"4.0.0","params":[{"key":"func (Function)","desc":" 要翻转参数的函数。","isNeed":true,"type":"Function","paramName":"func"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var flipped = _.flip(function() {\n  return _.toArray(arguments);\n});\n \nflipped('a', 'b', 'c', 'd');\n// => ['d', 'c', 'b', 'a']","class":"Function"},{"funcName":"memoize","useAge":"_.memoize(func, [resolver])","desc":"创建一个会缓存 func 结果的函数。 如果提供了 resolver ，就用 resolver 的返回值作为 key 缓存函数的结果。 默认情况下用第一个参数作为缓存的 key。 func 在调用时 this 会绑定在缓存函数上。\n\n注意: 缓存会暴露在缓存函数的 cache 上。 它是可以定制的，只要替换了 _.memoize.Cache 构造函数，或实现了 Map 的 delete, get, has, 和 set方法。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10401","version":"0.1.0","params":[{"key":"func (Function)","desc":" 需要缓存化的函数.","isNeed":true,"type":"Function","paramName":"func"},{"key":"[resolver] (Function)","desc":" 这个函数的返回值作为缓存的 key。","isNeed":false,"type":"Function","paramName":"[resolver]"}],"back":{"key":"(Function)","desc":" 返回缓存化后的函数。","type":"Function"},"demoCode":"var object = { 'a': 1, 'b': 2 };\nvar other = { 'c': 3, 'd': 4 };\n \nvar values = _.memoize(_.values);\nvalues(object);\n// => [1, 2]\n \nvalues(other);\n// => [3, 4]\n \nobject.a = 2;\nvalues(object);\n// => [1, 2]\n \n// 修改结果缓存。\nvalues.cache.set(object, ['a', 'b']);\nvalues(object);\n// => ['a', 'b']\n \n// 替换 `_.memoize.Cache`。\n_.memoize.Cache = WeakMap;","class":"Function"},{"funcName":"negate","useAge":"_.negate(predicate)","desc":"创建一个针对断言函数 func 结果取反的函数。 func 断言函数被调用的时候，this 绑定到创建的函数，并传入对应参数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10444","version":"3.0.0","params":[{"key":"predicate (Function)","desc":" 需要对结果取反的函数。","isNeed":true,"type":"Function","paramName":"predicate"}],"back":{"key":"(Function)","desc":" 返回一个新的取反函数。","type":"Function"},"demoCode":"function isEven(n) {\n  return n % 2 == 0;\n}\n \n_.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n// => [1, 3, 5]","class":"Function"},{"funcName":"once","useAge":"_.once(func)","desc":"创建一个只能调用 func 一次的函数。 重复调用返回第一次调用的结果。 func 调用时， this 绑定到创建的函数，并传入对应参数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10478","version":"0.1.0","params":[{"key":"func (Function)","desc":" 指定的触发的函数。","isNeed":true,"type":"Function","paramName":"func"}],"back":{"key":"(Function)","desc":" 返回新的受限函数。","type":"Function"},"demoCode":"var initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// `initialize` 只能调用 `createApplication` 一次。","class":"Function"},{"funcName":"overArgs","useAge":"_.overArgs(func, [transforms=[_.identity]])","desc":"创建一个函数，调用func时参数为相对应的transforms的返回值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10513","version":"4.0.0","params":[{"key":"func (Function)","desc":"要包裹的函数。","isNeed":true,"type":"Function","paramName":"func"}],"back":{"key":"(Function)","desc":" 返回新函数。","type":"Function"},"demoCode":"function doubled(n) {\n  return n * 2;\n}\n \nfunction square(n) {\n  return n * n;\n}\n \nvar func = _.overArgs(function(x, y) {\n  return [x, y];\n}, [square, doubled]);\n \nfunc(9, 3);\n// => [81, 6]\n \nfunc(10, 5);\n// => [100, 10]","class":"Function"},{"funcName":"partial","useAge":"_.partial(func, [partials])","desc":"创建一个函数。 该函数调用 func，并传入预设的 partials 参数。 这个方法类似 _.bind，除了它不会绑定 this。\n\n这个 _.partial.placeholder 的值，默认是以 _ 作为附加部分参数的占位符。\n\n注意: 这个方法不会设置 \"length\" 到函数上。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10563","version":"0.2.0","params":[{"key":"func (Function)","desc":" 需要预设的函数","isNeed":true,"type":"Function","paramName":"func"},{"key":"[partials] (...*)","desc":" 预设的参数","isNeed":false,"type":"...*","paramName":"[partials]"}],"back":{"key":"(Function)","desc":" 返回预设参数的函数。","type":"Function"},"demoCode":"var greet = function(greeting, name) {\n  return greeting + ' ' + name;\n};\n \nvar sayHelloTo = _.partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n \n// 使用了占位符。\nvar greetFred = _.partial(greet, _, 'fred');\ngreetFred('hi');\n// => 'hi fred'","class":"Function"},{"funcName":"partialRight","useAge":"_.partialRight(func, [partials])","desc":"这个函数类似 _.partial，除了预设参数被附加到接受参数的后面。\n\n这个 _.partialRight.placeholder 的值，默认是以 _ 作为附加部分参数的占位符。\n\n注意: 这个方法不会设置 \"length\" 到函数上。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10600","version":"1.0.0","params":[{"key":"func (Function)","desc":" 需要预设的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[partials] (...*)","desc":" 预设的参数。","isNeed":false,"type":"...*","paramName":"[partials]"}],"back":{"key":"(Function)","desc":"返回预设参数的函数。","type":"Function"},"demoCode":"var greet = function(greeting, name) {\n  return greeting + ' ' + name;\n};\n \nvar greetFred = _.partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n \n// 使用了占位符。\nvar sayHelloTo = _.partialRight(greet, 'hello', _);\nsayHelloTo('fred');\n// => 'hello fred'","class":"Function"},{"funcName":"rearg","useAge":"_.rearg(func, indexes)","desc":"创建一个函数,调用func时，根据指定的 indexes 调整对应位置参数。其中第一个索引值是对应第一个参数，第二个索引值是作为第二个参数，依此类推。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10627","version":"3.0.0","params":[{"key":"func (Function)","desc":" 待调用的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"indexes (...(number|number[]))","desc":" 排列参数的位置。","isNeed":false,"type":"...(number|number[]","paramName":"indexes"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var rearged = _.rearg(function(a, b, c) {\n  return [a, b, c];\n}, [2, 0, 1]);\n \nrearged('b', 'c', 'a')\n// => ['a', 'b', 'c']","class":"Function"},{"funcName":"rest","useAge":"_.rest(func, [start=func.length-1])","desc":"创建一个函数，调用func时，this绑定到创建的新函数，并且start之后的参数作为数组传入。\n\nNote: 这个方法基于 rest parameter。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10656","version":"4.0.0","params":[{"key":"func (Function)","desc":" 要应用的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[start=func.length-1] (number)","desc":" rest 参数的开始位置。","isNeed":false,"type":"number","paramName":"start","initValue":"func.length-1"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var say = _.rest(function(what, names) {\n  return what + ' ' + _.initial(names).join(', ') +\n    (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n});\n \nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'","class":"Function"},{"funcName":"spread","useAge":"_.spread(func, [start=0])","desc":"创建一个函数，调用func时，this绑定到创建的新函数，把参数作为数组传入，类似于 Function#apply.\n\nNote: 这个方法基于 spread operator.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10698","version":"3.2.0","params":[{"key":"func (Function)","desc":" 要应用传播参数的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[start=0] (number)","desc":" spread 参数的开始位置.","isNeed":false,"type":"number","paramName":"start","initValue":"0"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var say = _.spread(function(who, what) {\n  return who + ' says ' + what;\n});\n \nsay(['fred', 'hello']);\n// => 'fred says hello'\n \nvar numbers = Promise.all([\n  Promise.resolve(40),\n  Promise.resolve(36)\n]);\n \nnumbers.then(_.spread(function(x, y) {\n  return x + y;\n}));\n// => a Promise of 76","class":"Function"},{"funcName":"throttle","useAge":"_.throttle(func, [wait=0], [options={}])","desc":"创建一个节流函数，在 wait 秒内最多执行 func 一次的函数。 该函数提供一个 cancel 方法取消延迟的函数调用以及 flush 方法立即调用。 可以提供一个 options 对象决定如何调用 func 方法， options.leading 与|或 options.trailing 决定 wait 前后如何触发。 func 会传入最后一次传入的参数给这个函数。 随后调用的函数返回是最后一次 func 调用的结果。\n\n注意: 如果 leading 和 trailing 都设定为 true 则 func 允许 trailing 方式调用的条件为: 在 wait 期间多次调用。\n\n如果 wait 为 0 并且 leading 为 false, func调用将被推迟到下一个点，类似setTimeout为0的超时。\n\n查看 David Corbacho's article 了解 _.throttle 与 _.debounce 的区别。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10758","version":"0.1.0","params":[{"key":"func (Function)","desc":" 要节流的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[wait=0] (number)","desc":" 需要节流的毫秒。","isNeed":false,"type":"number","paramName":"wait","initValue":"0"},{"key":"[options={}] (Object)","desc":" 选项对象。","isNeed":false,"type":"Object","paramName":"options","initValue":"{}"},{"key":"[options.leading=true] (boolean)","desc":" 指定调用在节流开始前。","isNeed":false,"type":"boolean","paramName":"options.leading","initValue":"true"},{"key":"[options.trailing=true] (boolean)","desc":" 指定调用在节流结束后。","isNeed":false,"type":"boolean","paramName":"options.trailing","initValue":"true"}],"back":{"key":"(Function)","desc":" 返回节流的函数。","type":"Function"},"demoCode":"// 避免在滚动时过分的更新定位\njQuery(window).on('scroll', _.throttle(updatePosition, 100));\n \n// 点击后就调用 `renewToken`，但5分钟内超过1次。\nvar throttled = _.throttle(renewToken, 300000, { 'trailing': false });\njQuery(element).on('click', throttled);\n \n// 取消一个 trailing 的节流调用。\njQuery(window).on('popstate', throttled.cancel);","class":"Function"},{"funcName":"unary","useAge":"_.unary(func)","desc":"创建一个最多接受一个参数的函数，忽略多余的参数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10791","version":"4.0.0","params":[{"key":"func (Function)","desc":" 要处理的函数。","isNeed":true,"type":"Function","paramName":"func"}],"back":{"key":"(Function)","desc":" 返回新函数。","type":"Function"},"demoCode":"_.map(['6', '8', '10'], _.unary(parseInt));\n// => [6, 8, 10]","class":"Function"},{"funcName":"wrap","useAge":"_.wrap(value, [wrapper=identity])","desc":"创建一个函数。提供的 value 包装在 wrapper 函数的第一个参数里。 任何附加的参数都提供给 wrapper 函数。 被调用时 this 绑定在创建的函数上。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10817","version":"0.1.0","params":[{"key":"value (*)","desc":" 要包装的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[wrapper=identity] (Function)","desc":" 包装函数。","isNeed":false,"type":"Function","paramName":"wrapper","initValue":"identity"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var p = _.wrap(_.escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n \np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'","class":"Function"},{"funcName":"castArray","useAge":"_.castArray(value)","desc":"如果 value 不是数组, 那么强制转为数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10857","version":"4.4.0","params":[{"key":"value (*)","desc":" 要处理的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(Array)","desc":" 返回转换后的数组。","type":"Array"},"demoCode":"_.castArray(1);\n// => [1]\n \n_.castArray({ 'a': 1 });\n// => [{ 'a': 1 }]\n \n_.castArray('abc');\n// => ['abc']\n \n_.castArray(null);\n// => [null]\n \n_.castArray(undefined);\n// => [undefined]\n \n_.castArray();\n// => []\n \nvar array = [1, 2, 3];\nconsole.log(_.castArray(array) === array);\n// => true","class":"Lang"},{"funcName":"clone","useAge":"_.clone(value)","desc":"创建一个 value 的浅拷贝。\n\n注意: 这个方法参考自 structured clone algorithm 以及支持 arrays、array buffers、 booleans、 date objects、maps、 numbers， Object 对象, regexes, sets, strings, symbols, 以及 typed arrays。 arguments对象的可枚举属性会拷贝为普通对象。 一些不可拷贝的对象，例如error objects、functions, DOM nodes, 以及 WeakMaps 会返回空对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10891","version":"0.1.0","params":[{"key":"value (*)","desc":" 要拷贝的值","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(*)","desc":" 返回拷贝后的值。","type":"*"},"demoCode":"var objects = [{ 'a': 1 }, { 'b': 2 }];\n \nvar shallow = _.clone(objects);\nconsole.log(shallow[0] === objects[0]);\n// => true","class":"Lang"},{"funcName":"cloneDeep","useAge":"_.cloneDeep(value)","desc":"这个方法类似 _.clone，除了它会递归拷贝 value。（也叫深拷贝）。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10948","version":"1.0.0","params":[{"key":"value (*)","desc":" 要深拷贝的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(*)","desc":" 返回拷贝后的值。","type":"*"},"demoCode":"var objects = [{ 'a': 1 }, { 'b': 2 }];\n \nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false","class":"Lang"},{"funcName":"cloneDeepWith","useAge":"_.cloneDeepWith(value, [customizer])","desc":"这个方法类似 _.cloneWith，除了它会递归克隆 value。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10980","version":"4.0.0","params":[{"key":"value (*)","desc":" 用来递归克隆的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[customizer] (Function)","desc":" 用来自定义克隆的函数。","isNeed":false,"type":"Function","paramName":"[customizer]"}],"back":{"key":"(*)","desc":" 返回深度克隆后的值。","type":"*"},"demoCode":"function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(true);\n  }\n}\n \nvar el = _.cloneDeepWith(document.body, customizer);\n \nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 20","class":"Lang"},{"funcName":"cloneWith","useAge":"_.cloneWith(value, [customizer])","desc":"这个方法类似 _.clone，除了它接受一个 customizer 定制返回的克隆值。 如果 customizer 返回 undefined 将会使用拷贝方法代替处理。 customizer 调用4个参数： (value [, index|key, object, stack])。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L10926","version":"4.0.0","params":[{"key":"value (*)","desc":" 要克隆的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[customizer] (Function)","desc":" 用来自定义克隆的函数。","isNeed":false,"type":"Function","paramName":"[customizer]"}],"back":{"key":"(*)","desc":" 返回克隆值。","type":"*"},"demoCode":"function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(false);\n  }\n}\n \nvar el = _.cloneWith(document.body, customizer);\n \nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 0","class":"Lang"},{"funcName":"conformsTo","useAge":"_.conformsTo(object, source)","desc":"通过调用断言source的属性与 object 的相应属性值，检查 object是否符合 source。当source偏应用时，这种方法和 _.conforms函数是等价的。\n\n注意: 当source为偏应用时，这种方法等价于 _.conforms。（关于偏应用大家可以自己到google上搜索一下）。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11008","version":"4.14.0","params":[{"key":"object (Object)","desc":" 要检查的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"source (Object)","desc":" 要断言属性是否符合的对象。","isNeed":true,"type":"Object","paramName":"source"}],"back":{"key":"(boolean)","desc":" 如果 object 符合，返回 true，否则 false。","type":"boolean"},"demoCode":"var object = { 'a': 1, 'b': 2 };\n \n_.conformsTo(object, { 'b': function(n) { return n > 1; } });\n// => true\n \n_.conformsTo(object, { 'b': function(n) { return n > 2; } });\n// => false","class":"Lang"},{"funcName":"eq","useAge":"_.eq(value, other)","desc":"执行 SameValueZero 比较两者的值，来确定它们是否相等。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11044","version":"4.0.0","params":[{"key":"value (*)","desc":" 要比较的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"other (*)","desc":" 另一个要比较的值。","isNeed":true,"type":"*","paramName":"other"}],"back":{"key":"(boolean)","desc":" 如果两个值相等返回 true ，否则返回 false 。","type":"boolean"},"demoCode":"var object = { 'a': 1 };\nvar other = { 'a': 1 };\n \n_.eq(object, object);\n// => true\n \n_.eq(object, other);\n// => false\n \n_.eq('a', 'a');\n// => true\n \n_.eq('a', Object('a'));\n// => false\n \n_.eq(NaN, NaN);\n// => true","class":"Lang"},{"funcName":"gt","useAge":"_.gt(value, other)","desc":"检查 value是否大于 other。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11071","version":"3.9.0","params":[{"key":"value (*)","desc":" 要比较的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"other (*)","desc":" 另一个要比较的值。","isNeed":true,"type":"*","paramName":"other"}],"back":{"key":"(boolean)","desc":" 如果value 大于 other 返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.gt(3, 1);\n// => true\n \n_.gt(3, 3);\n// => false\n \n_.gt(1, 3);\n// => false","class":"Lang"},{"funcName":"gte","useAge":"_.gte(value, other)","desc":"检查 value是否大于或者等于 other。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11096","version":"3.9.0","params":[{"key":"value (*)","desc":" 要比较的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"other (*)","desc":" 另一个要比较的值。","isNeed":true,"type":"*","paramName":"other"}],"back":{"key":"(boolean)","desc":" 如果value 大于或者等于 other 返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.gte(3, 1);\n// => true\n \n_.gte(3, 3);\n// => true\n \n_.gte(1, 3);\n// => false","class":"Lang"},{"funcName":"isArguments","useAge":"_.isArguments(value)","desc":"检查 value 是否是一个类 arguments 对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11118","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果value是一个 arguments 对象 返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isArguments(function() { return arguments; }());\n// => true\n \n_.isArguments([1, 2, 3]);\n// => false","class":"Lang"},{"funcName":"isArray","useAge":"_.isArray(value)","desc":"检查 value 是否是 Array 类对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11147","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果value是一个数组返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isArray([1, 2, 3]);\n// => true\n \n_.isArray(document.body.children);\n// => false\n \n_.isArray('abc');\n// => false\n \n_.isArray(_.noop);\n// => false","class":"Lang"},{"funcName":"isArrayBuffer","useAge":"_.isArrayBuffer(value)","desc":"检查 value 是否是 ArrayBuffer 对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11166","version":"4.3.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果value是一个数组 buffer 返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isArrayBuffer(new ArrayBuffer(2));\n// => true\n \n_.isArrayBuffer(new Array(2));\n// => false","class":"Lang"},{"funcName":"isArrayLike","useAge":"_.isArrayLike(value)","desc":"检查 value 是否是类数组。 如果一个值被认为是类数组，那么它不是一个函数，并且value.length是个整数，大于等于 0，小于或等于 Number.MAX_SAFE_INTEGER。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11193","version":"4.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果value是一个类数组，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isArrayLike([1, 2, 3]);\n// => true\n \n_.isArrayLike(document.body.children);\n// => true\n \n_.isArrayLike('abc');\n// => true\n \n_.isArrayLike(_.noop);\n// => false","class":"Lang"},{"funcName":"isArrayLikeObject","useAge":"_.isArrayLikeObject(value)","desc":"这个方法类似 _.isArrayLike。除了它还检查value是否是个对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11222","version":"4.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个类数组对象，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isArrayLikeObject([1, 2, 3]);\n// => true\n \n_.isArrayLikeObject(document.body.children);\n// => true\n \n_.isArrayLikeObject('abc');\n// => false\n \n_.isArrayLikeObject(_.noop);\n// => false","class":"Lang"},{"funcName":"isBoolean","useAge":"_.isBoolean(value)","desc":"检查 value 是否是原始 boolean 类型或者对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11243","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个布尔值，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isBoolean(false);\n// => true\n \n_.isBoolean(null);\n// => false","class":"Lang"},{"funcName":"isBuffer","useAge":"_.isBuffer(value)","desc":"检查 value 是否是个 buffer。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11265","version":"4.3.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个buffer，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isBuffer(new Buffer(2));\n// => true\n \n_.isBuffer(new Uint8Array(2));\n// => false","class":"Lang"},{"funcName":"isDate","useAge":"_.isDate(value)","desc":"检查 value 是否是 Date 对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11284","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个日期对象，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isDate(new Date); \n// => true\n \n_.isDate('Mon April 23 2012');\n// => false","class":"Lang"},{"funcName":"isElement","useAge":"_.isElement(value)","desc":"检查 value 是否是可能是 DOM 元素。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11303","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个DOM元素，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isElement(document.body);\n// => true\n \n_.isElement('<body>');\n// => false","class":"Lang"},{"funcName":"isEmpty","useAge":"_.isEmpty(value)","desc":"检查 value 是否为一个空对象，集合，映射或者set。 判断的依据是除非是有枚举属性的对象，length 大于 0 的 arguments object, array, string 或类jquery选择器。\n\n对象如果被认为为空，那么他们没有自己的可枚举属性的对象。\n\n类数组值，比如 arguments对象，array，buffer，string或者类jQuery集合的length 为 0，被认为是空。类似的，map（映射）和set 的size 为 0，被认为是空。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11340","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为空，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isEmpty(null);\n// => true\n \n_.isEmpty(true);\n// => true\n \n_.isEmpty(1);\n// => true\n \n_.isEmpty([1, 2, 3]);\n// => false\n \n_.isEmpty({ 'a': 1 });\n// => false","class":"Lang"},{"funcName":"isEqual","useAge":"_.isEqual(value, other)","desc":"执行深比较来确定两者的值是否相等。\n\n**注意: **这个方法支持比较 arrays, array buffers, booleans, date objects, error objects, maps, numbers, Object objects, regexes, sets, strings, symbols, 以及 typed arrays. Object 对象值比较自身的属性，不包括继承的和可枚举的属性。 不支持函数和DOM节点比较。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11389","version":"0.1.0","params":[{"key":"value (*)","desc":" 用来比较的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"other (*)","desc":" 另一个用来比较的值。","isNeed":true,"type":"*","paramName":"other"}],"back":{"key":"(boolean)","desc":" 如果 两个值完全相同，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"var object = { 'a': 1 };\nvar other = { 'a': 1 };\n \n_.isEqual(object, other);\n// => true\n \nobject === other;\n// => false","class":"Lang"},{"funcName":"isEqualWith","useAge":"_.isEqualWith(value, other, [customizer])","desc":"这个方法类似 _.isEqual。 除了它接受一个 customizer 用来定制比较值。 如果 customizer 返回 undefined 将会比较处理方法代替。 customizer 会传入6个参数：(objValue, othValue [, index|key, object, other, stack])","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11425","version":"4.0.0","params":[{"key":"value (*)","desc":" 用来比较的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"other (*)","desc":" 另一个用来比较的值。","isNeed":true,"type":"*","paramName":"other"},{"key":"[customizer] (Function)","desc":" 用来定制比较值的函数。","isNeed":false,"type":"Function","paramName":"[customizer]"}],"back":{"key":"(boolean)","desc":" 如果 两个值完全相同，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n \nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n \nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n \n_.isEqualWith(array, other, customizer);\n// => true","class":"Lang"},{"funcName":"isError","useAge":"_.isError(value)","desc":"检查 value 是否是 Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, 或者 URIError对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11449","version":"3.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个错误（Error）对象，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isError(new Error);\n// => true\n \n_.isError(Error);\n// => false","class":"Lang"},{"funcName":"isFinite","useAge":"_.isFinite(value)","desc":"检查 value 是否是原始有限数值。\n\n** 注意:** 这个方法基于 Number.isFinite.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11483","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个有限数值，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isFinite(3);\n// => true\n \n_.isFinite(Number.MIN_VALUE);\n// => true\n \n_.isFinite(Infinity);\n// => false\n \n_.isFinite('3');\n// => false","class":"Lang"},{"funcName":"isFunction","useAge":"_.isFunction(value)","desc":"检查 value 是否是 Function 对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11504","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个函数，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isFunction(_);\n// => true\n \n_.isFunction(/abc/);\n// => false","class":"Lang"},{"funcName":"isInteger","useAge":"_.isInteger(value)","desc":"检查 value 是否为一个整数。\n\n注意: 这个方法基于 Number.isInteger.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11537","version":"4.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个整数，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isInteger(3);\n// => true\n \n_.isInteger(Number.MIN_VALUE);\n// => false\n \n_.isInteger(Infinity);\n// => false\n \n_.isInteger('3');\n// => false","class":"Lang"},{"funcName":"isLength","useAge":"_.isLength(value)","desc":"检查 value 是否为有效的类数组长度。\n\n注意: 这个函数基于 ToLength.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11567","version":"4.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个有效长度，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isLength(3);\n// => true\n \n_.isLength(Number.MIN_VALUE);\n// => false\n \n_.isLength(Infinity);\n// => false\n \n_.isLength('3');\n// => false","class":"Lang"},{"funcName":"isMap","useAge":"_.isMap(value)","desc":"检查 value 是否为一个 Map 对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11647","version":"4.3.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个 Map 对象，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isMap(new Map);\n// => true\n \n_.isMap(new WeakMap);\n// => false","class":"Lang"},{"funcName":"isMatch","useAge":"_.isMatch(object, source)","desc":"执行一个深度比较，来确定 object 是否含有和 source 完全相等的属性值。\n\n注意: 当source为偏应用时，这种方法等价于 _.matches。（关于偏应用大家可以自己到google上搜索一下）。\n\n偏应用比较匹配空数组和空对象 source值分别针对任何数组或对象的价值。在 _.isEqual中查看支持的值比较列表。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11677","version":"3.0.0","params":[{"key":"object (Object)","desc":" 要检查的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"source (Object)","desc":" 属性值相匹配的对象。","isNeed":true,"type":"Object","paramName":"source"}],"back":{"key":"(boolean)","desc":" 如果object匹配，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"var object = { 'a': 1, 'b': 2 };\n \n_.isMatch(object, { 'b': 2 });\n// => true\n \n_.isMatch(object, { 'b': 1 });\n// => false","class":"Lang"},{"funcName":"isMatchWith","useAge":"_.isMatchWith(object, source, [customizer])","desc":"这个方法类似 _.isMatch。 除了它接受一个 customizer 定制比较的值。 如果 customizer 返回 undefined 将会比较处理方法代替。 customizer 会传入5个参数：(objValue, srcValue, index|key, object, source)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11713","version":"4.0.0","params":[{"key":"object (Object)","desc":" 要检查的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"source (Object)","desc":" 属性值相匹配的对象。","isNeed":true,"type":"Object","paramName":"source"},{"key":"[customizer] (Function)","desc":" 这个函数用来定制比较。","isNeed":false,"type":"Function","paramName":"[customizer]"}],"back":{"key":"(boolean)","desc":" 如果object匹配，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n \nfunction customizer(objValue, srcValue) {\n  if (isGreeting(objValue) && isGreeting(srcValue)) {\n    return true;\n  }\n}\n \nvar object = { 'greeting': 'hello' };\nvar source = { 'greeting': 'hi' };\n \n_.isMatchWith(object, source, customizer);\n// => true","class":"Lang"},{"funcName":"isNaN","useAge":"_.isNaN(value)","desc":"检查 value 是否是 NaN。\n\n注意: 这个方法基于 Number.isNaN，和全局的 isNaN 不同之处在于，全局的 isNaN对 于 undefined 和其他非数字的值返回 true。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11746","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个 NaN，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isNaN(NaN);\n// => true\n \n_.isNaN(new Number(NaN));\n// => true\n \nisNaN(undefined);\n// => true\n \n_.isNaN(undefined);\n// => false","class":"Lang"},{"funcName":"isNative","useAge":"_.isNative(value)","desc":"检查 value 是否是一个原生函数。\n\n注意： 这种方法不能可靠地检测在core-js包中存在的本地函数，因为 core-js 规避这种检测。尽管有多个请求，core-js 维护者已经明确表态：任何试图修复检测将受阻。这样一来，我们别无选择，只能抛出一个错误。不幸的是，这也影响其他的包，比如依赖于 core-js的 babel-polyfill。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11779","version":"3.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是一个 原生函数，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isNative(Array.prototype.push);\n// => true\n \n_.isNative(_);\n// => false","class":"Lang"},{"funcName":"isNil","useAge":"_.isNil(value)","desc":"检查 value 是否是 null 或者 undefined。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11827","version":"4.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为null 或 undefined，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isNil(null);\n// => true\n \n_.isNil(void 0);\n// => true\n \n_.isNil(NaN);\n// => false","class":"Lang"},{"funcName":"isNull","useAge":"_.isNull(value)","desc":"检查 valuealue 是否是 null。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11803","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为null，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isNull(null);\n// => true\n \n_.isNull(void 0);\n// => false","class":"Lang"},{"funcName":"isNumber","useAge":"_.isNumber(value)","desc":"检查 value 是否是原始Number数值型 或者 对象。\n\n注意: 要排除 Infinity, -Infinity, 以及 NaN 数值类型，用 _.isFinite 方法。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11857","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个数值，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isNumber(3);\n// => true\n \n_.isNumber(Number.MIN_VALUE);\n// => true\n \n_.isNumber(Infinity);\n// => true\n \n_.isNumber('3');\n// => false","class":"Lang"},{"funcName":"isObject","useAge":"_.isObject(value)","desc":"检查 value 是否为 Object 的 language type。 (例如： arrays, functions, objects, regexes,new Number(0), 以及 new String(''))","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11597","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个对象，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isObject({});\n// => true\n \n_.isObject([1, 2, 3]);\n// => true\n \n_.isObject(_.noop);\n// => true\n \n_.isObject(null);\n// => false","class":"Lang"},{"funcName":"isObjectLike","useAge":"_.isObjectLike(value)","desc":"检查 value 是否是 类对象。 如果一个值是类对象，那么它不应该是 null，而且 typeof 后的结果是 \"object\"。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11626","version":"4.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个类对象，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isObjectLike({});\n// => true\n \n_.isObjectLike([1, 2, 3]);\n// => true\n \n_.isObjectLike(_.noop);\n// => false\n \n_.isObjectLike(null);\n// => false","class":"Lang"},{"funcName":"isPlainObject","useAge":"_.isPlainObject(value)","desc":"检查 value 是否是普通对象。 也就是说该对象由 Object 构造函数创建，或者 [[Prototype]] 为 null 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11890","version":"0.8.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个普通对象，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"function Foo() {\n  this.a = 1;\n}\n \n_.isPlainObject(new Foo);\n// => false\n \n_.isPlainObject([1, 2, 3]);\n// => false\n \n_.isPlainObject({ 'x': 0, 'y': 0 });\n// => true\n \n_.isPlainObject(Object.create(null));\n// => true","class":"Lang"},{"funcName":"isRegExp","useAge":"_.isRegExp(value)","desc":"检查 value 是否为RegExp对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11920","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个正则表达式，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isRegExp(/abc/);\n// => true\n \n_.isRegExp('/abc/');\n// => false","class":"Lang"},{"funcName":"isSafeInteger","useAge":"_.isSafeInteger(value)","desc":"检查 value 是否是一个安全整数。 一个安全整数应该是符合 IEEE-754 标准的非双精度浮点数。\n\n注意: 这个方法基于 Number.isSafeInteger.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11949","version":"4.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个安全整数，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isSafeInteger(3);\n// => true\n \n_.isSafeInteger(Number.MIN_VALUE);\n// => false\n \n_.isSafeInteger(Infinity);\n// => false\n \n_.isSafeInteger('3');\n// => false","class":"Lang"},{"funcName":"isSet","useAge":"_.isSet(value)","desc":"检查 value 是否是一个Set对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11970","version":"4.3.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个 set 对象，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isSet(new Set);\n// => true\n \n_.isSet(new WeakSet);\n// => false","class":"Lang"},{"funcName":"isString","useAge":"_.isString(value)","desc":"检查 value 是否是原始字符串String或者对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L11989","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个字符串，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isString('abc');\n// => true\n \n_.isString(1);\n// => false","class":"Lang"},{"funcName":"isSymbol","useAge":"_.isSymbol(value)","desc":"检查 value 是否是原始 Symbol 或者对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12011","version":"4.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个symbol，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isSymbol(Symbol.iterator);\n// => true\n \n_.isSymbol('abc');\n// => false","class":"Lang"},{"funcName":"isTypedArray","useAge":"_.isTypedArray(value)","desc":"检查 value 是否是TypedArray。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12033","version":"3.0.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个typed array，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isTypedArray(new Uint8Array);\n// => true\n \n_.isTypedArray([]);\n// => false","class":"Lang"},{"funcName":"isUndefined","useAge":"_.isUndefined(value)","desc":"检查 value 是否是 undefined.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12052","version":"0.1.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 是 undefined ，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isUndefined(void 0);\n// => true\n \n_.isUndefined(null);\n// => false","class":"Lang"},{"funcName":"isWeakMap","useAge":"_.isWeakMap(value)","desc":"检查 value 是否是 WeakMap 对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12073","version":"4.3.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个 WeakMap 对象 ，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isWeakMap(new WeakMap);\n// => true\n \n_.isWeakMap(new Map);\n// => false","class":"Lang"},{"funcName":"isWeakSet","useAge":"_.isWeakSet(value)","desc":"检查 value 是否是 WeakSet 对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12094","version":"4.3.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(boolean)","desc":" 如果 value 为一个 WeakSet 对象 ，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.isWeakSet(new WeakSet);\n// => true\n \n_.isWeakSet(new Set);\n// => false","class":"Lang"},{"funcName":"lt","useAge":"_.lt(value, other)","desc":"检查 value 是否小于 other。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12121","version":"3.9.0","params":[{"key":"value (*)","desc":" 用来比较的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"other (*)","desc":" 另一个用来比较的值。","isNeed":true,"type":"*","paramName":"other"}],"back":{"key":"(boolean)","desc":" 如果value 小于 other 返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.lt(1, 3);\n// => true\n \n_.lt(3, 3);\n// => false\n \n_.lt(3, 1);\n// => false","class":"Lang"},{"funcName":"lte","useAge":"_.lte(value, other)","desc":"检查 value 是否小于等于 other。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12146","version":"3.9.0","params":[{"key":"value (*)","desc":" 用来比较的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"other (*)","desc":" 另一个用来比较的值。","isNeed":true,"type":"*","paramName":"other"}],"back":{"key":"(boolean)","desc":" 如果value 小于等于 other 返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.lte(1, 3);\n// => true\n \n_.lte(3, 3);\n// => true\n \n_.lte(3, 1);\n// => false","class":"Lang"},{"funcName":"toArray","useAge":"_.toArray(value)","desc":"转换 value 为一个数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12173","version":"0.1.0","params":[{"key":"value (*)","desc":" 要转换的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(Array)","desc":" 返回转换后的数组。","type":"Array"},"demoCode":"_.toArray({ 'a': 1, 'b': 2 });\n// => [1, 2]\n \n_.toArray('abc');\n// => ['a', 'b', 'c']\n \n_.toArray(1);\n// => []\n \n_.toArray(null);\n// => []","class":"Lang"},{"funcName":"toFinite","useAge":"_.toFinite(value)","desc":"转换 value 为一个有限数字。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12212","version":"4.12.0","params":[{"key":"value (*)","desc":" 要转换的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(number)","desc":" 返回转换后的数字。","type":"number"},"demoCode":"_.toFinite(3.2);\n// => 3.2\n \n_.toFinite(Number.MIN_VALUE);\n// => 5e-324\n \n_.toFinite(Infinity);\n// => 1.7976931348623157e+308\n \n_.toFinite('3.2');\n// => 3.2","class":"Lang"},{"funcName":"toInteger","useAge":"_.toInteger(value)","desc":"转换 value 为一个整数。\n\n注意: 这个方法基于 ToInteger.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12250","version":"4.0.0","params":[{"key":"value (*)","desc":" 要转换的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(number)","desc":" 返回转换后的整数。","type":"number"},"demoCode":"_.toInteger(3.2);\n// => 3\n \n_.toInteger(Number.MIN_VALUE);\n// => 0\n \n_.toInteger(Infinity);\n// => 1.7976931348623157e+308\n \n_.toInteger('3.2');\n// => 3","class":"Lang"},{"funcName":"toLength","useAge":"_.toLength(value)","desc":"转换 value 为用作类数组对象的长度整数。\n\n注意: 这个方法基于 ToLength.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12284","version":"4.0.0","params":[{"key":"value (*)","desc":" 要转换的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(number)","desc":" 返回转换后的整数。","type":"number"},"demoCode":"_.toLength(3.2);\n// => 3\n \n_.toLength(Number.MIN_VALUE);\n// => 0\n \n_.toLength(Infinity);\n// => 4294967295\n \n_.toLength('3.2');\n// => 3","class":"Lang"},{"funcName":"toNumber","useAge":"_.toNumber(value)","desc":"转换 value 为一个数字。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12311","version":"4.0.0","params":[{"key":"value (*)","desc":" 要处理的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(number)","desc":" 返回数字。","type":"number"},"demoCode":"_.toNumber(3.2);\n// => 3.2\n \n_.toNumber(Number.MIN_VALUE);\n// => 5e-324\n \n_.toNumber(Infinity);\n// => Infinity\n \n_.toNumber('3.2');\n// => 3.2","class":"Lang"},{"funcName":"toPlainObject","useAge":"_.toPlainObject(value)","desc":"转换 value 为普通对象。 包括继承的可枚举属性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12356","version":"3.0.0","params":[{"key":"value (*)","desc":" 要转换的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(Object)","desc":" 返回转换后的普通对象。","type":"Object"},"demoCode":"function Foo() {\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.assign({ 'a': 1 }, new Foo);\n// => { 'a': 1, 'b': 2 }\n \n_.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n// => { 'a': 1, 'b': 2, 'c': 3 }","class":"Lang"},{"funcName":"toSafeInteger","useAge":"_.toSafeInteger(value)","desc":"转换 value 为安全整数。 安全整数可以用于比较和准确的表示。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12384","version":"4.0.0","params":[{"key":"value (*)","desc":" 要转换的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(number)","desc":" 返回转换后的整数。","type":"number"},"demoCode":"_.toSafeInteger(3.2);\n// => 3\n \n_.toSafeInteger(Number.MIN_VALUE);\n// => 0\n \n_.toSafeInteger(Infinity);\n// => 9007199254740991\n \n_.toSafeInteger('3.2');\n// => 3","class":"Lang"},{"funcName":"toString","useAge":"_.toString(value)","desc":"转换 value 为字符串。 null 和 undefined 将返回空字符串。-0 将被转换为字符串\"-0\"。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12409","version":"4.0.0","params":[{"key":"value (*)","desc":" 要处理的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(string)","desc":" 返回字符串。","type":"string"},"demoCode":"_.toString(null);\n// => ''\n \n_.toString(-0);\n// => '-0'\n \n_.toString([1, 2, 3]);\n// => '1,2,3'","class":"Lang"},{"funcName":"add","useAge":"_.add(augend, addend)","desc":"两个数相加。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15975","version":"3.4.0","params":[{"key":"augend (number)","desc":" 相加的第一个数。","isNeed":true,"type":"number","paramName":"augend"},{"key":"addend (number)","desc":" 相加的第二个数。","isNeed":true,"type":"number","paramName":"addend"}],"back":{"key":"(number)","desc":" 返回总和。","type":"number"},"demoCode":"_.add(6, 4);\n// => 10","class":"Math"},{"funcName":"ceil","useAge":"_.ceil(number, [precision=0])","desc":"根据 precision（精度） 向上舍入 number。（ precision（精度）可以理解为保留几位小数。）","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16000","version":"3.10.0","params":[{"key":"number (number)","desc":" 要向上舍入的值。","isNeed":true,"type":"number","paramName":"number"},{"key":"[precision=0] (number)","desc":" 向上舍入的的精度。","isNeed":false,"type":"number","paramName":"precision","initValue":"0"}],"back":{"key":"(number)","desc":" 返回向上舍入的值。","type":"number"},"demoCode":"_.ceil(4.006);\n// => 5\n \n_.ceil(6.004, 2);\n// => 6.01\n \n_.ceil(6040, -2);\n// => 6100","class":"Math"},{"funcName":"divide","useAge":"_.divide(dividend, divisor)","desc":"两个数相除。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16017","version":"4.7.0","params":[{"key":"dividend (number)","desc":" 相除的第一个数。","isNeed":true,"type":"number","paramName":"dividend"},{"key":"divisor (number)","desc":" 相除的第二个数。","isNeed":true,"type":"number","paramName":"divisor"}],"back":{"key":"(number)","desc":" 返回商数。","type":"number"},"demoCode":"_.divide(6, 4);\n// => 1.5","class":"Math"},{"funcName":"floor","useAge":"_.floor(number, [precision=0])","desc":"根据 precision（精度） 向下舍入 number。（ precision（精度）可以理解为保留几位小数。）","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16042","version":"3.10.0","params":[{"key":"number (number)","desc":" 要向下舍入的值。","isNeed":true,"type":"number","paramName":"number"},{"key":"[precision=0] (number)","desc":" 向下舍入的精度。","isNeed":false,"type":"number","paramName":"precision","initValue":"0"}],"back":{"key":"(number)","desc":" 返回向下舍入的值。","type":"number"},"demoCode":"_.floor(4.006);\n// => 4\n \n_.floor(0.046, 2);\n// => 0.04\n \n_.floor(4060, -2);\n// => 4000","class":"Math"},{"funcName":"max","useAge":"_.max(array)","desc":"计算 array 中的最大值。 如果 array 是 空的或者假值将会返回 undefined。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16062","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要迭代的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(*)","desc":" 返回最大的值。","type":"*"},"demoCode":"_.max([4, 2, 8, 6]);\n// => 8\n \n_.max([]);\n// => undefined","class":"Math"},{"funcName":"maxBy","useAge":"_.maxBy(array, [iteratee=_.identity])","desc":"这个方法类似 _.max 除了它接受 iteratee 来调用 array中的每一个元素，来生成其值排序的标准。 iteratee 会调用1个参数: (value) 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16091","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要迭代的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[iteratee=_.identity] (Function)","desc":" 调用每个元素的迭代函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(*)","desc":" 返回最大的值。","type":"*"},"demoCode":"var objects = [{ 'n': 1 }, { 'n': 2 }];\n \n_.maxBy(objects, function(o) { return o.n; });\n// => { 'n': 2 }\n \n// The `_.property` iteratee shorthand.\n_.maxBy(objects, 'n');\n// => { 'n': 2 }","class":"Math"},{"funcName":"mean","useAge":"_.mean(array)","desc":"计算 array 的平均值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16111","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要迭代的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(number)","desc":" 返回平均值。","type":"number"},"demoCode":"_.mean([4, 2, 8, 6]);\n// => 5","class":"Math"},{"funcName":"meanBy","useAge":"_.meanBy(array, [iteratee=_.identity])","desc":"这个方法类似 _.mean， 除了它接受 iteratee 来调用 array中的每一个元素，来生成其值排序的标准。 iteratee 会调用1个参数: (value) 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16138","version":"4.7.0","params":[{"key":"array (Array)","desc":" 要迭代的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[iteratee=_.identity] (Function)","desc":" 调用每个元素的迭代函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(number)","desc":" 返回平均值。","type":"number"},"demoCode":"var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n \n_.meanBy(objects, function(o) { return o.n; });\n// => 5\n \n// The `_.property` iteratee shorthand.\n_.meanBy(objects, 'n');\n// => 5","class":"Math"},{"funcName":"min","useAge":"_.min(array)","desc":"计算 array 中的最小值。 如果 array 是 空的或者假值将会返回 undefined。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16160","version":"0.1.0","params":[{"key":"array (Array)","desc":" 要迭代的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(*)","desc":" 返回最小的值。","type":"*"},"demoCode":"_.min([4, 2, 8, 6]);\n// => 2\n \n_.min([]);\n// => undefined","class":"Math"},{"funcName":"minBy","useAge":"_.minBy(array, [iteratee=_.identity])","desc":"这个方法类似 _.min 除了它接受 iteratee 来调用 array中的每一个元素，来生成其值排序的标准。 iteratee 会调用1个参数: (value) 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16189","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要迭代的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[iteratee=_.identity] (Function)","desc":" 调用每个元素的迭代函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(*)","desc":" 返回最小的值。","type":"*"},"demoCode":"var objects = [{ 'n': 1 }, { 'n': 2 }];\n \n_.minBy(objects, function(o) { return o.n; });\n// => { 'n': 1 }\n \n// The `_.property` iteratee shorthand.\n_.minBy(objects, 'n');\n// => { 'n': 1 }","class":"Math"},{"funcName":"multiply","useAge":"_.multiply(multiplier, multiplicand)","desc":"两个数相乘。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16210","version":"4.7.0","params":[{"key":"augend (number)","desc":" 相乘的第一个数。","isNeed":true,"type":"number","paramName":"augend"},{"key":"addend (number)","desc":" 相乘的第二个数。","isNeed":true,"type":"number","paramName":"addend"}],"back":{"key":"(number)","desc":" 返回乘积。","type":"number"},"demoCode":"_.multiply(6, 4);\n// => 24","class":"Math"},{"funcName":"round","useAge":"_.round(number, [precision=0])","desc":"根据 precision（精度） 四舍五入 number。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16235","version":"3.10.0","params":[{"key":"number (number)","desc":" 要四舍五入的数字。","isNeed":true,"type":"number","paramName":"number"},{"key":"[precision=0] (number)","desc":" 四舍五入的精度。","isNeed":false,"type":"number","paramName":"precision","initValue":"0"}],"back":{"key":"(number)","desc":" 返回四舍五入的数字。","type":"number"},"demoCode":"_.round(4.006);\n// => 4\n \n_.round(4.006, 2);\n// => 4.01\n \n_.round(4060, -2);\n// => 4100","class":"Math"},{"funcName":"subtract","useAge":"_.subtract(minuend, subtrahend)","desc":"亮数相减。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16252","version":"4.0.0","params":[{"key":"minuend (number)","desc":" 相减的第一个数。","isNeed":true,"type":"number","paramName":"minuend"},{"key":"subtrahend (number)","desc":" 相减的第二个数。","isNeed":true,"type":"number","paramName":"subtrahend"}],"back":{"key":"(number)","desc":" 返回差。","type":"number"},"demoCode":"_.subtract(6, 4);\n// => 2","class":"Math"},{"funcName":"sum","useAge":"_.sum(array)","desc":"计算 array 中值的总和","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16270","version":"3.4.0","params":[{"key":"array (Array)","desc":" 要迭代的数组。","isNeed":true,"type":"Array","paramName":"array"}],"back":{"key":"(number)","desc":" 返回总和。","type":"number"},"demoCode":"_.sum([4, 2, 8, 6]);\n// => 20","class":"Math"},{"funcName":"sumBy","useAge":"_.sumBy(array, [iteratee=_.identity])","desc":"这个方法类似 _.summin 除了它接受 iteratee 来调用 array中的每一个元素，来生成其值排序的标准。 iteratee 会调用1个参数: (value) 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16299","version":"4.0.0","params":[{"key":"array (Array)","desc":" 要迭代的数组。","isNeed":true,"type":"Array","paramName":"array"},{"key":"[iteratee=_.identity] (Function)","desc":" 调用每个元素的迭代函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(number)","desc":" 返回总和。","type":"number"},"demoCode":"var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n \n_.sumBy(objects, function(o) { return o.n; });\n// => 20\n \n// The `_.property` iteratee shorthand.\n_.sumBy(objects, 'n');\n// => 20","class":"Math"},{"funcName":"clamp","useAge":"_.clamp(number, [lower], upper)","desc":"返回限制在 lower 和 upper 之间的值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13772","version":"4.0.0","params":[{"key":"number (number)","desc":" 被限制的值。","isNeed":true,"type":"number","paramName":"number"},{"key":"[lower] (number)","desc":" 下限。","isNeed":false,"type":"number","paramName":"[lower]"},{"key":"upper (number)","desc":" 上限。","isNeed":true,"type":"number","paramName":"upper"}],"back":{"key":"(number)","desc":" 返回被限制的值。","type":"number"},"demoCode":"_.clamp(-10, -5, 5);\n// => -5\n \n_.clamp(10, -5, 5);\n// => 5","class":"Number"},{"funcName":"inRange","useAge":"_.inRange(number, [start=0], end)","desc":"检查 n 是否在 start 与 end 之间，但不包括 end。 如果 end 没有指定，那么 start 设置为0。 如果 start 大于 end，那么参数会交换以便支持负范围。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13826","version":"3.3.0","params":[{"key":"number (number)","desc":" 要检查的值。","isNeed":true,"type":"number","paramName":"number"},{"key":"[start=0] (number)","desc":" 开始范围。","isNeed":false,"type":"number","paramName":"start","initValue":"0"},{"key":"end (number)","desc":" 结束范围。","isNeed":true,"type":"number","paramName":"end"}],"back":{"key":"(boolean)","desc":" 如果number在范围内 ，那么返回true，否则返回 false。","type":"boolean"},"demoCode":"_.inRange(3, 2, 4);\n// => true\n \n_.inRange(4, 8);\n// => true\n \n_.inRange(4, 2);\n// => false\n \n_.inRange(2, 2);\n// => false\n \n_.inRange(1.2, 2);\n// => true\n \n_.inRange(5.2, 4);\n// => false\n \n_.inRange(-3, -2, -6);\n// => true","class":"Number"},{"funcName":"random","useAge":"_.random([lower=0], [upper=1], [floating])","desc":"产生一个包括 lower 与 upper 之间的数。 如果只提供一个参数返回一个0到提供数之间的数。 如果 floating 设为 true，或者 lower 或 upper 是浮点数，结果返回浮点数。\n\n注意: JavaScript 遵循 IEEE-754 标准处理无法预料的浮点数结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13869","version":"0.7.0","params":[{"key":"[lower=0] (number)","desc":" 下限。","isNeed":false,"type":"number","paramName":"lower","initValue":"0"},{"key":"[upper=1] (number)","desc":" 上限。","isNeed":false,"type":"number","paramName":"upper","initValue":"1"},{"key":"[floating] (boolean)","desc":" 指定是否返回浮点数。","isNeed":false,"type":"boolean","paramName":"[floating]"}],"back":{"key":"(number)","desc":" 返回随机数。","type":"number"},"demoCode":"_.random(0, 5);\n// => an integer between 0 and 5\n \n_.random(5);\n// => also an integer between 0 and 5\n \n_.random(5, true);\n// => a floating-point number between 0 and 5\n \n_.random(1.2, 5.2);\n// => a floating-point number between 1.2 and 5.2","class":"Number"},{"funcName":"assign","useAge":"_.assign(object, [sources])","desc":"分配来源对象的可枚举属性到目标对象上。 来源对象的应用规则是从左到右，随后的下一个对象的属性会覆盖上一个对象的属性。\n\n注意: 这方法会改变 object，参考自 Object.assign.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12447","version":"0.10.0","params":[{"key":"object (Object)","desc":" 目标对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[sources] (...Object)","desc":" 来源对象。","isNeed":false,"type":"...Object","paramName":"[sources]"}],"back":{"key":"(Object)","desc":" 返回 object.","type":"Object"},"demoCode":"function Foo() {\n  this.a = 1;\n}\n \nfunction Bar() {\n  this.c = 3;\n}\n \nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n \n_.assign({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'c': 3 }","class":"Object"},{"funcName":"assignIn","useAge":"_.assignIn(object, [sources])","aliasFuncName":"_.extend","desc":"这个方法类似 _.assign， 除了它会遍历并继承来源对象的属性。\n\nNote: 这方法会改变 object。添加版本","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12490","version":"4.0.0","params":[{"key":"object (Object)","desc":" 目标对象。"},{"key":"[sources] (...Object)","desc":" 来源对象。"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"function Foo() {\n  this.a = 1;\n}\n \nfunction Bar() {\n  this.c = 3;\n}\n \nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n \n_.assignIn({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }","class":"Object"},{"funcName":"assignInWith","useAge":"_.assignInWith(object, sources, [customizer])","aliasFuncName":"_.extendWith","desc":"这个方法类似 _.assignIn， 除了它接受一个 customizer ，被调用以产生所分配的值。 如果 customizer 返回 undefined 将会由分配处理方法代替。 customizer 会传入5个参数： (objValue, srcValue, key, object, source)。\n\nNote: 这方法会改变 object。添加版本","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12523","version":"4.0.0","params":[{"key":"object (Object)","desc":" 目标对象。"},{"key":"sources (...Object)","desc":" 来源对象。"},{"key":"[customizer] (Function)","desc":" 这个函数用来自定义分配的值。"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n \nvar defaults = _.partialRight(_.assignInWith, customizer);\n \ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }","class":"Object"},{"funcName":"assignWith","useAge":"_.assignWith(object, sources, [customizer])","desc":"这个方法类似 _.assign ， 除了它接受一个 customizer 决定如何分配值。 如果customizer返回 undefined 将会由分配处理方法代替。customizer 会传入5个参数： (objValue, srcValue, key, object, source)。\n\nNote: 这方法会改变 object.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12555","version":"4.0.0","params":[{"key":"object (Object)","desc":" 目标对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"sources (...Object)","desc":" 来源对象。","isNeed":true,"type":"...Object","paramName":"sources"},{"key":"[customizer] (Function)","desc":" 这个函数用来自定义分配的值。","isNeed":false,"type":"Function","paramName":"[customizer]"}],"back":{"key":"(Object)","desc":" 返回 object.","type":"Object"},"demoCode":"function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n \nvar defaults = _.partialRight(_.assignWith, customizer);\n \ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }","class":"Object"},{"funcName":"at","useAge":"_.at(object, [paths])","desc":"创建一个数组，值来自 object 的paths路径相应的值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12576","version":"1.0.0","params":[{"key":"object (Object)","desc":" 要迭代的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[paths] (...(string|string[]))","desc":" 要获取的对象的元素路径，单独指定或者指定在数组中。","isNeed":false,"type":"...(string|string[]","paramName":"[paths]"}],"back":{"key":"(Array)","desc":" 返回选中值的数组。","type":"Array"},"demoCode":"var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n \n_.at(object, ['a[0].b.c', 'a[1]']);\n// => [3, 4]","class":"Object"},{"funcName":"create","useAge":"_.create(prototype, [properties])","desc":"创建一个继承 prototype 的对象。 如果提供了 prototype，它的可枚举属性会被分配到创建的对象上。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12612","version":"2.3.0","params":[{"key":"prototype (Object)","desc":" 要继承的对象。","isNeed":true,"type":"Object","paramName":"prototype"},{"key":"[properties] (Object)","desc":" 待分配的属性。","isNeed":false,"type":"Object","paramName":"[properties]"}],"back":{"key":"(Object)","desc":" 返回新对象。","type":"Object"},"demoCode":"function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n \nfunction Circle() {\n  Shape.call(this);\n}\n \nCircle.prototype = _.create(Shape.prototype, {\n  'constructor': Circle\n});\n \nvar circle = new Circle;\ncircle instanceof Circle;\n// => true\n \ncircle instanceof Shape;\n// => true","class":"Object"},{"funcName":"defaults","useAge":"_.defaults(object, [sources])","desc":"分配来源对象的可枚举属性到目标对象所有解析为 undefined 的属性上。 来源对象从左到右应用。 一旦设置了相同属性的值，后续的将被忽略掉。\n\n注意: 这方法会改变 object.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12638","version":"0.1.0","params":[{"key":"object (Object)","desc":" 目标对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[sources] (...Object)","desc":" 来源对象。","isNeed":false,"type":"...Object","paramName":"[sources]"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"_.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }","class":"Object"},{"funcName":"defaultsDeep","useAge":"_.defaultsDeep(object, [sources])","desc":"这个方法类似 _.defaults，除了它会递归分配默认属性。\n\n注意: 这方法会改变 object.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12662","version":"3.10.0","params":[{"key":"object (Object)","desc":" 目标对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[sources] (...Object)","desc":" 来源对象。","isNeed":false,"type":"...Object","paramName":"[sources]"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"_.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n// => { 'a': { 'b': 2, 'c': 3 } }","class":"Object"},{"funcName":"findKey","useAge":"_.findKey(object, [predicate=_.identity])","desc":"这个方法类似 _.find 。 除了它返回最先被 predicate 判断为真值的元素 key，而不是元素本身。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12702","version":"1.1.0","params":[{"key":"object (Object)","desc":" 需要检索的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[predicate=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(*)","desc":" 返回匹配的 key，否则返回 undefined。","type":"*"},"demoCode":"var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n \n_.findKey(users, function(o) { return o.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n \n// The `_.matches` iteratee shorthand.\n_.findKey(users, { 'age': 1, 'active': true });\n// => 'pebbles'\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findKey(users, ['active', false]);\n// => 'fred'\n \n// The `_.property` iteratee shorthand.\n_.findKey(users, 'active');\n// => 'barney'","class":"Object"},{"funcName":"findLastKey","useAge":"_.findLastKey(object, [predicate=_.identity])","desc":"这个方法类似 _.findKey。 不过它是反方向开始遍历的。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12741","version":"2.0.0","params":[{"key":"object (Object)","desc":" 需要检索的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[predicate=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(*)","desc":" 返回匹配的 key，否则返回 undefined.","type":"*"},"demoCode":"var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n \n_.findLastKey(users, function(o) { return o.age < 40; });\n// => returns 'pebbles' assuming `_.findKey` returns 'barney'\n \n// The `_.matches` iteratee shorthand.\n_.findLastKey(users, { 'age': 36, 'active': true });\n// => 'barney'\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findLastKey(users, ['active', false]);\n// => 'fred'\n \n// The `_.property` iteratee shorthand.\n_.findLastKey(users, 'active');\n// => 'pebbles'","class":"Object"},{"funcName":"forIn","useAge":"_.forIn(object, [iteratee=_.identity])","desc":"使用 iteratee 遍历对象的自身和继承的可枚举属性。 iteratee 会传入3个参数：(value, key, object)。 如果返回 false，iteratee 会提前退出遍历。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12773","version":"0.3.0","params":[{"key":"object (Object)","desc":" 要遍历的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.forIn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a', 'b', then 'c' (无法保证遍历的顺序)。","class":"Object"},{"funcName":"forInRight","useAge":"_.forInRight(object, [iteratee=_.identity])","desc":"这个方法类似 _.forIn。 除了它是反方向开始遍历object的。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12805","version":"2.0.0","params":[{"key":"object (Object)","desc":" 要遍历的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.forInRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => 输出 'c', 'b', 然后 'a'， `_.forIn` 会输出 'a', 'b', 然后 'c'。","class":"Object"},{"funcName":"forOwn","useAge":"_.forOwn(object, [iteratee=_.identity])","desc":"使用 iteratee 遍历自身的可枚举属性。 iteratee 会传入3个参数：(value, key, object)。 如果返回 false，iteratee 会提前退出遍历。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12839","version":"0.3.0","params":[{"key":"object (Object)","desc":" 要遍历的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.forOwn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => 输出 'a' 然后 'b' (无法保证遍历的顺序)。","class":"Object"},{"funcName":"forOwnRight","useAge":"_.forOwnRight(object, [iteratee=_.identity])","desc":"这个方法类似 _.forOwn。 除了它是反方向开始遍历object的。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12869","version":"2.0.0","params":[{"key":"object (Object)","desc":" 要遍历的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.forOwnRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// =>  输出 'b' 然后 'a'， `_.forOwn` 会输出 'a' 然后 'b'","class":"Object"},{"funcName":"functions","useAge":"_.functions(object)","desc":"创建一个函数属性名称的数组，函数属性名称来自object对象自身可枚举属性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12896","version":"0.1.0","params":[{"key":"object (Object)","desc":" 要检查的对象。","isNeed":true,"type":"Object","paramName":"object"}],"back":{"key":"(Array)","desc":" 返回函数名。","type":"Array"},"demoCode":"function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n \nFoo.prototype.c = _.constant('c');\n \n_.functions(new Foo);\n// => ['a', 'b']","class":"Object"},{"funcName":"functionsIn","useAge":"_.functionsIn(object)","desc":"创建一个函数属性名称的数组，函数属性名称来自object对象自身和继承的可枚举属性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12923","version":"4.0.0","params":[{"key":"object (Object)","desc":" 要检查的对象。","isNeed":true,"type":"Object","paramName":"object"}],"back":{"key":"(Array)","desc":" 返回函数名。","type":"Array"},"demoCode":"function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n \nFoo.prototype.c = _.constant('c');\n \n_.functionsIn(new Foo);\n// => ['a', 'b', 'c']","class":"Object"},{"funcName":"get","useAge":"_.get(object, path, [defaultValue])","desc":"根据 object对象的path路径获取值。 如果解析 value 是 undefined 会以 defaultValue 取代。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12952","version":"3.7.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 要获取属性的路径。","isNeed":true,"type":"Array|string","paramName":"path"},{"key":"[defaultValue] (*)","desc":" 如果解析值是 undefined ，这值会被返回。","isNeed":false,"type":"*","paramName":"[defaultValue]"}],"back":{"key":"(*)","desc":" 返回解析的值。","type":"*"},"demoCode":"var object = { 'a': [{ 'b': { 'c': 3 } }] };\n \n_.get(object, 'a[0].b.c');\n// => 3\n \n_.get(object, ['a', '0', 'b', 'c']);\n// => 3\n \n_.get(object, 'a.b.c', 'default');\n// => 'default'","class":"Object"},{"funcName":"has","useAge":"_.has(object, path)","desc":"检查 path 是否是object对象的直接属性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L12984","version":"0.1.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 要检查的路径path。","isNeed":true,"type":"Array|string","paramName":"path"}],"back":{"key":"(boolean)","desc":" 如果path存在，那么返回 true ，否则返回 false。","type":"boolean"},"demoCode":"var object = { 'a': { 'b': 2 } };\nvar other = _.create({ 'a': _.create({ 'b': 2 }) });\n \n_.has(object, 'a');\n// => true\n \n_.has(object, 'a.b');\n// => true\n \n_.has(object, ['a', 'b']);\n// => true\n \n_.has(other, 'a');\n// => false","class":"Object"},{"funcName":"hasIn","useAge":"_.hasIn(object, path)","desc":"检查 path 是否是object对象的直接或继承属性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13014","version":"4.0.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 要检查的路径path。","isNeed":true,"type":"Array|string","paramName":"path"}],"back":{"key":"(boolean)","desc":" 如果path存在，那么返回 true ，否则返回 false。","type":"boolean"},"demoCode":"var object = _.create({ 'a': _.create({ 'b': 2 }) });\n \n_.hasIn(object, 'a');\n// => true\n \n_.hasIn(object, 'a.b');\n// => true\n \n_.hasIn(object, ['a', 'b']);\n// => true\n \n_.hasIn(object, 'b');\n// => false","class":"Object"},{"funcName":"invert","useAge":"_.invert(object)","desc":"创建一个object键值倒置后的对象。 如果 object 有重复的值，后面的值会覆盖前面的值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13036","version":"0.7.0","params":[{"key":"object (Object)","desc":" 要键值倒置对象。","isNeed":true,"type":"Object","paramName":"object"}],"back":{"key":"(Object)","desc":" 返回新的键值倒置后的对象。","type":"Object"},"demoCode":"var object = { 'a': 1, 'b': 2, 'c': 1 };\n \n_.invert(object);\n// => { '1': 'c', '2': 'b' }","class":"Object"},{"funcName":"invertBy","useAge":"_.invertBy(object, [iteratee=_.identity])","desc":"这个方法类似 _.invert，除了倒置对象 是 collection（集合）中的每个元素经过 iteratee（迭代函数） 处理后返回的结果。每个反转键相应反转的值是一个负责生成反转值key的数组。iteratee 会传入3个参数：(value) 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13066","version":"4.1.0","params":[{"key":"object (Object)","desc":" 要键值倒置对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回新的键值倒置后的对象。","type":"Object"},"demoCode":"var object = { 'a': 1, 'b': 2, 'c': 1 };\n \n_.invertBy(object);\n// => { '1': ['a', 'c'], '2': ['b'] }\n \n_.invertBy(object, function(value) {\n  return 'group' + value;\n});\n// => { 'group1': ['a', 'c'], 'group2': ['b'] }","class":"Object"},{"funcName":"invoke","useAge":"_.invoke(object, path, [args])","desc":"调用object对象path上的方法。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13092","version":"4.0.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 用来调用的方法路径。","isNeed":true,"type":"Array|string","paramName":"path"},{"key":"[args] (...*)","desc":" 调用的方法的参数。","isNeed":false,"type":"...*","paramName":"[args]"}],"back":{"key":"(*)","desc":" 返回调用方法的结果。","type":"*"},"demoCode":"var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n \n_.invoke(object, 'a[0].b.c.slice', 1, 3);\n// => [2, 3]","class":"Object"},{"funcName":"keys","useAge":"_.keys(object)","desc":"创建一个 object 的自身可枚举属性名为数组。\n\nNote: 非对象的值会被强制转换为对象，查看 ES spec 了解详情。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13122","version":"0.1.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"}],"back":{"key":"(Array)","desc":" 返回包含属性名的数组。","type":"Array"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.keys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed)\n \n_.keys('hi');\n// => ['0', '1']","class":"Object"},{"funcName":"keysIn","useAge":"_.keysIn(object)","desc":"创建一个 object 自身 和 继承的可枚举属性名为数组。\n\n注意: 非对象的值会被强制转换为对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13149","version":"3.0.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"}],"back":{"key":"(Array)","desc":" 返回包含属性名的数组。","type":"Array"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.keysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)","class":"Object"},{"funcName":"mapKeys","useAge":"_.mapKeys(object, [iteratee=_.identity])","desc":"反向版 _.mapValues。 这个方法创建一个对象，对象的值与object相同，并且 key 是通过 iteratee 运行 object 中每个自身可枚举属性名字符串 产生的。iteratee调用三个参数： (value, key, object)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13174","version":"3.8.0","params":[{"key":"object (Object)","desc":" 要遍历的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回映射后的新对象。","type":"Object"},"demoCode":"_.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n  return key + value;\n});\n// => { 'a1': 1, 'b2': 2 }","class":"Object"},{"funcName":"mapValues","useAge":"_.mapValues(object, [iteratee=_.identity])","desc":"创建一个对象，这个对象的key与object对象相同，值是通过 iteratee 运行 object 中每个自身可枚举属性名字符串产生的。 iteratee调用三个参数： (value, key, object)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13212","version":"2.4.0","params":[{"key":"object (Object)","desc":" 要遍历的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回映射后的新对象。","type":"Object"},"demoCode":"var users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n \n_.mapValues(users, function(o) { return o.age; });\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n \n// The `_.property` iteratee shorthand.\n_.mapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)","class":"Object"},{"funcName":"merge","useAge":"_.merge(object, [sources])","desc":"该方法类似 _.assign， 除了它递归合并 sources 来源对象自身和继承的可枚举属性到 object 目标对象。如果目标值存在，被解析为undefined的sources 来源对象属性将被跳过。数组和普通对象会递归合并，其他对象和值会被直接分配覆盖。源对象从从左到右分配。后续的来源对象属性会覆盖之前分配的属性。\n\nNote: 这方法会改变对象 object.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13253","version":"0.5.0","params":[{"key":"object (Object)","desc":" 目标对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[sources] (...Object)","desc":" 来源对象。","isNeed":false,"type":"...Object","paramName":"[sources]"}],"back":{"key":"(Object)","desc":" 返回 object.","type":"Object"},"demoCode":"var object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n};\n \nvar other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n};\n \n_.merge(object, other);\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }","class":"Object"},{"funcName":"mergeWith","useAge":"_.mergeWith(object, sources, customizer)","desc":"该方法类似 _.merge，除了它接受一个 customizer，调用以产生目标对象和来源对象属性的合并值。如果customizer 返回 undefined，将会由合并处理方法代替。 customizer调用与7个参数：(objValue, srcValue, key, object, source, stack)。\n\nNote: 这方法会改变对象 object.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13288","version":"4.0.0","params":[{"key":"object (Object)","desc":" 目标对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[sources] (...Object)","desc":" 来源对象。","isNeed":false,"type":"...Object","paramName":"[sources]"},{"key":"customizer (Function)","desc":" 这个函数定制合并值。","isNeed":true,"type":"Function","paramName":"customizer"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"function customizer(objValue, srcValue) {\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n \nvar object = { 'a': [1], 'b': [2] };\nvar other = { 'a': [3], 'b': [4] };\n \n_.mergeWith(object, other, customizer);\n// => { 'a': [1, 3], 'b': [2, 4] }","class":"Object"},{"funcName":"omit","useAge":"_.omit(object, [props])","desc":"反向版 _.pick; 这个方法一个对象，这个对象由忽略属性之外的object自身和继承的可枚举属性组成。（可以理解为删除object对象的属性）。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13311","version":"0.1.0","params":[{"key":"object (Object)","desc":" 来源对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[props] (...(string|string[]))","desc":" 要被忽略的属性。（单独指定或指定在数组中。）","isNeed":false,"type":"...(string|string[]","paramName":"[props]"}],"back":{"key":"(Object)","desc":" 返回新对象。","type":"Object"},"demoCode":"var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.omit(object, ['a', 'c']);\n// => { 'b': '2' }","class":"Object"},{"funcName":"omitBy","useAge":"_.omitBy(object, [predicate=_.identity])","desc":"反向版 _.pickBy；这个方法一个对象，这个对象忽略 predicate（断言函数）判断不是真值的属性后，object自身和继承的可枚举属性组成。predicate调用与2个参数：(value, key)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13339","version":"4.0.0","params":[{"key":"object (Object)","desc":" 来源对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[predicate=_.identity] (Function)","desc":" 调用每一个属性的函数。","isNeed":false,"type":"Function","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回新对象。","type":"Object"},"demoCode":"var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.omitBy(object, _.isNumber);\n// => { 'b': '2' }","class":"Object"},{"funcName":"pick","useAge":"_.pick(object, [props])","desc":"创建一个从 object 中选中的属性的对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13360","version":"0.1.0","params":[{"key":"object (Object)","desc":" 来源对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[props] (...(string|string[]))","desc":" 要被忽略的属性。（单独指定或指定在数组中。）","isNeed":false,"type":"...(string|string[]","paramName":"[props]"}],"back":{"key":"(Object)","desc":" 返回新对象。","type":"Object"},"demoCode":"var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.pick(object, ['a', 'c']);\n// => { 'a': 1, 'c': 3 }","class":"Object"},{"funcName":"pickBy","useAge":"_.pickBy(object, [predicate=_.identity])","desc":"创建一个对象，这个对象组成为从 object 中经 predicate 判断为真值的属性。 predicate调用2个参数：(value, key)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13382","version":"4.0.0","params":[{"key":"object (Object)","desc":" 来源对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[predicate=_.identity] (Function)","desc":" 调用每一个属性的函数。","isNeed":false,"type":"Function","paramName":"predicate","initValue":"_.identity"}],"back":{"key":"(Object)","desc":" 返回新对象。","type":"Object"},"demoCode":"var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.pickBy(object, _.isNumber);\n// => { 'a': 1, 'c': 3 }","class":"Object"},{"funcName":"result","useAge":"_.result(object, path, [defaultValue])","desc":"这个方法类似 _.get， 除了如果解析到的值是一个函数的话，就绑定 this 到这个函数并返回执行后的结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13415","version":"0.1.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 要解析的属性路径。","isNeed":true,"type":"Array|string","paramName":"path"},{"key":"[defaultValue] (*)","desc":" 如果值解析为 undefined，返回这个值。","isNeed":false,"type":"*","paramName":"[defaultValue]"}],"back":{"key":"(*)","desc":" 返回解析后的值。","type":"*"},"demoCode":"var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n \n_.result(object, 'a[0].b.c1');\n// => 3\n \n_.result(object, 'a[0].b.c2');\n// => 4\n \n_.result(object, 'a[0].b.c3', 'default');\n// => 'default'\n \n_.result(object, 'a[0].b.c3', _.constant('default'));\n// => 'default'","class":"Object"},{"funcName":"set","useAge":"_.set(object, path, value)","desc":"设置 object对象中对应 path 属性路径上的值，如果path不存在，则创建。 缺少的索引属性会创建为数组，而缺少的属性会创建为对象。 使用 _.setWith 定制path创建。\n\nNote: 这个方法会改变 object。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13465","version":"3.7.0","params":[{"key":"object (Object)","desc":" 要修改的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 要设置的对象路径。","isNeed":true,"type":"Array|string","paramName":"path"},{"key":"value (*)","desc":" 要设置的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"var object = { 'a': [{ 'b': { 'c': 3 } }] };\n \n_.set(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\n \n_.set(object, ['x', '0', 'y', 'z'], 5);\nconsole.log(object.x[0].y.z);\n// => 5","class":"Object"},{"funcName":"setWith","useAge":"_.setWith(object, path, value, [customizer])","desc":"这个方法类似 _.set，除了它接受一个 customizer，调用生成对象的 path。 如果 customizer 返回 undefined 将会有它的处理方法代替。 customizer 调用3个参数： (nsValue, key, nsObject)。\n\n注意: 这个方法会改变 object.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13493","version":"4.0.0","params":[{"key":"object (Object)","desc":" 要修改的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 要设置的对象路径。","isNeed":true,"type":"Array|string","paramName":"path"},{"key":"value (*)","desc":" 要设置的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"[customizer] (Function)","desc":" 这个函数用来定制分配的值。","isNeed":false,"type":"Function","paramName":"[customizer]"}],"back":{"key":"(Object)","desc":" 返回 object。","type":"Object"},"demoCode":"var object = {};\n \n_.setWith(object, '[0][1]', 'a', Object);\n// => { '0': { '1': 'a' } }","class":"Object"},{"funcName":"toPairs","useAge":"_.toPairs(object)","aliasFuncName":"_.entries","desc":"创建一个object对象自身可枚举属性的键值对数组。这个数组可以通过 _.fromPairs撤回。如果object 是 map 或 set，返回其条目。添加版本","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13522","version":"4.0.0","params":[{"key":"object (Object)","desc":" 要检索的对象。"}],"back":{"key":"(Array)","desc":" 返回键值对的数组。","type":"Array"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.toPairs(new Foo);\n// => [['a', 1], ['b', 2]] (iteration order is not guaranteed)","class":"Object"},{"funcName":"toPairsIn","useAge":"_.toPairsIn(object)","aliasFuncName":"_.entriesIn","desc":"创建一个object对象自身和继承的可枚举属性的键值对数组。这个数组可以通过 _.fromPairs撤回。如果object 是 map 或 set，返回其条目。添加版本","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13548","version":"4.0.0","params":[{"key":"object (Object)","desc":" 要检索的对象。"}],"back":{"key":"(Array)","desc":" 返回键值对的数组。","type":"Array"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.toPairsIn(new Foo);\n// => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)","class":"Object"},{"funcName":"transform","useAge":"_.transform(object, [iteratee=_.identity], [accumulator])","desc":"_.reduce的替代方法;此方法将转换object对象为一个新的accumulator对象，结果来自iteratee处理自身可枚举的属性。 每次调用可能会改变 accumulator 对象。如果不提供accumulator，将使用与[[Prototype]]相同的新对象。iteratee调用4个参数：(accumulator, value, key, object)。如果返回 false，iteratee 会提前退出。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13580","version":"1.3.0","params":[{"key":"object (Object)","desc":" 要遍历的对象","isNeed":true,"type":"Object","paramName":"object"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代时调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"},{"key":"[accumulator] (*)","desc":" 定制叠加的值。","isNeed":false,"type":"*","paramName":"[accumulator]"}],"back":{"key":"(*)","desc":" 返回叠加后的值。","type":"*"},"demoCode":"_.transform([2, 3, 4], function(result, n) {\n  result.push(n *= n);\n  return n % 2 == 0;\n}, []);\n// => [4, 9]\n \n_.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] }","class":"Object"},{"funcName":"unset","useAge":"_.unset(object, path)","desc":"移除object对象 path 路径上的属性。\n\n注意: 这个方法会改变源对象 object。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13629","version":"4.0.0","params":[{"key":"object (Object)","desc":" 要修改的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 要移除的对象路径。","isNeed":true,"type":"Array|string","paramName":"path"}],"back":{"key":"(boolean)","desc":" 如果移除成功，那么返回 true ，否则返回 false。","type":"boolean"},"demoCode":"var object = { 'a': [{ 'b': { 'c': 7 } }] };\n_.unset(object, 'a[0].b.c');\n// => true\n \nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n \n_.unset(object, ['a', '0', 'b', 'c']);\n// => true\n \nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };","class":"Object"},{"funcName":"update","useAge":"_.update(object, path, updater)","desc":"该方法类似 _.set，除了接受updater以生成要设置的值。使用 _.updateWith来自定义生成的新path。updater调用1个参数：(value)。\n\nNote: 这个方法会改变 object。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13660","version":"4.6.0","params":[{"key":"object (Object)","desc":" 要修改的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 要设置属性的路径。","isNeed":true,"type":"Array|string","paramName":"path"},{"key":"updater (Function)","desc":" 用来生成设置值的函数。","isNeed":true,"type":"Function","paramName":"updater"}],"back":{"key":"(Object)","desc":" 返回 object 。","type":"Object"},"demoCode":"var object = { 'a': [{ 'b': { 'c': 3 } }] };\n \n_.update(object, 'a[0].b.c', function(n) { return n * n; });\nconsole.log(object.a[0].b.c);\n// => 9\n \n_.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\nconsole.log(object.x[0].y.z);\n// => 0","class":"Object"},{"funcName":"updateWith","useAge":"_.updateWith(object, path, updater, [customizer])","desc":"该方法类似 _.update，不同之处在于它接受customizer，调用来生成新的对象的path。如果customizer返回undefined，路径创建由该方法代替。customizer调用有三个参数：(nsValue, key, nsObject) 。\n\nNote: 这个方法会改变 object.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13688","version":"4.6.0","params":[{"key":"object (Object)","desc":" 要修改的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"path (Array|string)","desc":" 要设置属性的路径。","isNeed":true,"type":"Array|string","paramName":"path"},{"key":"updater (Function)","desc":" 用来生成设置值的函数。","isNeed":true,"type":"Function","paramName":"updater"},{"key":"[customizer] (Function)","desc":" 用来自定义分配值的函数。","isNeed":false,"type":"Function","paramName":"[customizer]"}],"back":{"key":"(Object)","desc":" 返回 object.","type":"Object"},"demoCode":"var object = {};\n \n_.updateWith(object, '[0][1]', _.constant('a'), Object);\n// => { '0': { '1': 'a' } }","class":"Object"},{"funcName":"values","useAge":"_.values(object)","desc":"创建 object 自身可枚举属性的值为数组。\n\n注意: 注意: 非对象的值会强制转换为对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13719","version":"0.1.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"}],"back":{"key":"(Array)","desc":" 返回对象属性的值的数组。","type":"Array"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.values(new Foo);\n// => [1, 2] (无法保证遍历的顺序)\n \n_.values('hi');\n// => ['h', 'i']","class":"Object"},{"funcName":"valuesIn","useAge":"_.valuesIn(object)","desc":"创建 object 自身和继承的可枚举属性的值为数组\n\n注意: 注意: 非对象的值会强制转换为对象。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13747","version":"3.0.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"}],"back":{"key":"(Array)","desc":" 返回对象属性的值的数组。","type":"Array"},"demoCode":"function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.valuesIn(new Foo);\n// => [1, 2, 3] (无法保证遍历的顺序)","class":"Object"},{"funcName":"","useAge":"_(value)","desc":"创建一个lodash对象，包装value后的对象启用隐式方法链。返回的数组、集合、方法相互之间能够链式调用。检索唯一值或返回原始值会自动解除链条并返回计算后的值，否则需要调用 _#value 方法解除链(即获得计算结果)。\n\n显式链式调用，在任何情况下需要先用 _#value 解除链后，才能使用 _.chain 开启。\n\n链式方法是惰性计算的，直到隐式或者显式调用了 _#value 才会执行计算。\n\n惰性计算接受几种支持 shortcut fusion 的方法， shortcut fusion 是一种通过合并链式 iteratee 调用从而大大降低迭代的次数以提高执行性能的方式。 部分链有资格 shortcut fusion，如果它至少有超过200个元素的数组和任何只接受一个参数的 iteratees。 触发的方式是任何一个 shortcut fusion 有了变化。\n\n链式方法支持定制版本，只要 _#value 包含或者间接包含在版本中。\n\n除了 lodash 的自身方法，包装后的对象还支持 Array 和 String 的方法。\n\n支持 Array 的方法: concat, join, pop, push, shift, sort, splice, 和 unshift\n\n支持 String 的方法: replace 和 split\n\n支持 shortcut fusion 的方法: at, compact, drop, dropRight, dropWhile, filter, find, findLast, head, initial, last, map, reject, reverse, slice, tail, take, takeRight, takeRightWhile, takeWhile, 和 toArray\n\n支持 链式调用 的方法: after, ary, assign, assignIn, assignInWith, assignWith, at, before, bind, bindAll, bindKey, castArray, chain, chunk, commit, compact, concat, conforms, constant, countBy, create, curry, debounce, defaults, defaultsDeep, defer, delay, difference, differenceBy, differenceWith, drop, dropRight, dropRightWhile, dropWhile, extend, extendWith, fill, filter, flatMap, flatMapDeep, flatMapDepth, flatten, flattenDeep, flattenDepth, flip, flow, flowRight, fromPairs, functions, functionsIn, groupBy, initial, intersection, intersectionBy, intersectionWith, invert, invertBy, invokeMap, iteratee, keyBy, keys, keysIn, map, mapKeys, mapValues, matches, matchesProperty, memoize, merge, mergeWith, method, methodOf, mixin, negate, nthArg, omit, omitBy, once, orderBy, over, overArgs, overEvery, overSome, partial, partialRight, partition, pick, pickBy, plant, property, propertyOf, pull, pullAll, pullAllBy, pullAllWith, pullAt, push, range, rangeRight, rearg, reject, remove, rest, reverse, sampleSize, set, setWith, shuffle, slice, sort, sortBy, splice, spread, tail, take, takeRight, takeRightWhile, takeWhile, tap, throttle, thru, toArray, toPairs, toPairsIn, toPath, toPlainObject, transform, unary, union, unionBy, unionWith, uniq, uniqBy, uniqWith, unset, unshift, unzip, unzipWith, update, updateWith, values, valuesIn, without, wrap, xor, xorBy, xorWith, zip, zipObject, zipObjectDeep, and zipWith\n\n默认 不 支持 链式调用 的方法: add, attempt, camelCase, capitalize, ceil, clamp, clone, cloneDeep, cloneDeepWith, cloneWith, conformsTo, deburr, defaultTo, divide, each, eachRight, endsWith, eq, escape, escapeRegExp, every, find, findIndex, findKey, findLast, findLastIndex, findLastKey, first, floor, forEach, forEachRight, forIn, forInRight, forOwn, forOwnRight, get, gt, gte, has, hasIn, head, identity, includes, indexOf, inRange, invoke, isArguments, isArray, isArrayBuffer, isArrayLike, isArrayLikeObject, isBoolean, isBuffer, isDate, isElement, isEmpty, isEqual, isEqualWith, isError, isFinite, isFunction, isInteger, isLength, isMap, isMatch, isMatchWith, isNaN, isNative, isNil, isNull, isNumber, isObject, isObjectLike, isPlainObject, isRegExp, isSafeInteger, isSet, isString, isUndefined, isTypedArray, isWeakMap, isWeakSet, join, kebabCase, last, lastIndexOf, lowerCase, lowerFirst, lt, lte, max, maxBy, mean, meanBy, min, minBy, multiply, noConflict, noop, now, nth, pad, padEnd, padStart, parseInt, pop, random, reduce, reduceRight, repeat, result, round, runInContext, sample, shift, size, snakeCase, some, sortedIndex, sortedIndexBy, sortedLastIndex, sortedLastIndexBy, startCase, startsWith, stubArray, stubFalse, stubObject, stubString, stubTrue, subtract, sum, sumBy, template, times, toFinite, toInteger, toJSON, toLength, toLower, toNumber, toSafeInteger, toString, toUpper, trim, trimEnd, trimStart, truncate, unescape, uniqueId, upperCase, upperFirst, value, and words","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L1644","version":"\n\t\t\t\t<li><code>value</code> <em>(*)</em>: 需要被包装为 <code>lodash</code> 实例的值。</li>\n\t\t\t","params":[],"back":{"key":"function square(n) {\n  return n * n;\n}\n \nvar wrapped = _([1, 2, 3]);\n \n// 返回未包装的值\nwrapped.reduce(_.add);\n// => 6\n \n// 返回链式包装的值\nvar squares = wrapped.map(square);\n \n_.isArray(squares);\n// => false\n \n_.isArray(squares.value());\n// => true","type":"unction square(n) {\n  return n * n;\n}\n \nvar wrapped = _([1, 2, 3]);\n \n// 返回未包装的值\nwrapped.reduce(_.add);\n// => 6\n \n// 返回链式包装的值\nvar squares = wrapped.map(square);\n \n_.isArray(squares);\n// => false\n \n_.isArray(squares.value());\n// => tru"},"class":"Seq"},{"funcName":"chain","useAge":"_.chain(value)","desc":"创建一个lodash包装实例，包装value以启用显式链模式。要解除链必须使用 _#value 方法。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8589","version":"1.3.0","params":[{"key":"value (*)","desc":" 要包装的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(Object)","desc":" 返回 lodash 包装的实例。","type":"Object"},"demoCode":"var users = [\n  { 'user': 'barney',  'age': 36 },\n  { 'user': 'fred',    'age': 40 },\n  { 'user': 'pebbles', 'age': 1 }\n];\n \nvar youngest = _\n  .chain(users)\n  .sortBy('age')\n  .map(function(o) {\n    return o.user + ' is ' + o.age;\n  })\n  .head()\n  .value();\n// => 'pebbles is 1'","class":"Seq"},{"funcName":"tap","useAge":"_.tap(value, interceptor)","desc":"这个方法调用一个 interceptor 并返回 value。interceptor调用1个参数： (value)。 该方法的目的是 进入 方法链序列以便修改中间结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8618","version":"0.1.0","params":[{"key":"value (*)","desc":" 提供给 interceptor 的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"interceptor (Function)","desc":" 用来调用的函数。","isNeed":true,"type":"Function","paramName":"interceptor"}],"back":{"key":"(*)","desc":" 返回 value.","type":"*"},"demoCode":"_([1, 2, 3])\n .tap(function(array) {\n// 改变传入的数组\n   array.pop();\n })\n .reverse()\n .value();\n// => [2, 1]","class":"Seq"},{"funcName":"thru","useAge":"_.thru(value, interceptor)","desc":"这个方法类似 _.tap， 除了它返回 interceptor 的返回结果。该方法的目的是\"传递\" 值到一个方法链序列以取代中间结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8646","version":"3.0.0","params":[{"key":"value (*)","desc":" 提供给 interceptor 的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"interceptor (Function)","desc":" 用来调用的函数。","isNeed":true,"type":"Function","paramName":"interceptor"}],"back":{"key":"(*)","desc":" 返回 interceptor 的返回结果。","type":"*"},"demoCode":"_('  abc  ')\n .chain()\n .trim()\n .thru(function(value) {\n   return [value];\n })\n .value();\n// => ['abc']","class":"Seq"},{"funcName":"prototype<a href=\"\">Symbol.iterator</a","useAge":"_.prototype<a href=\"\">Symbol.iterator</a>","desc":"启用包装对象为 iterable。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8801","version":"4.0.0","params":[],"back":{"key":"var wrapped = _([1, 2]);\n \nwrapped[Symbol.iterator]() === wrapped;\n// => true\n \nArray.from(wrapped);\n// => [1, 2]","type":"ar wrapped = _([1, 2]);\n \nwrapped[Symbol.iterator]() === wrapped;\n// => true\n \nArray.from(wrapped);\n// => [1, 2"},"class":"Seq"},{"funcName":"prototype.at","useAge":"_.prototype.at([paths])","desc":"这个方法是 _.at 的包装版本 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8666","version":"1.0.0","params":[{"key":"[paths] (...(string|string[]))","desc":" 要选择元素的属性路径（ 单独指定或者数组）。","isNeed":false,"type":"...(string|string[]","paramName":"[paths]"}],"back":{"key":"(Object)","desc":" 返回 lodash 的包装实例。","type":"Object"},"demoCode":"var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n \n_(object).at(['a[0].b.c', 'a[1]']).value();\n// => [3, 4]","class":"Seq"},{"funcName":"prototype.chain","useAge":"_.prototype.chain()","desc":"创建一个lodash包装实例，启用显式链模式。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8717","version":"0.1.0","params":[],"back":{"key":"var users = [\n  { 'user'","desc":" 'barney', 'age'","type":"ar users = [\n  { 'user"},"class":"Seq"},{"funcName":"prototype.commit","useAge":"_.prototype.commit()","desc":"执行链式队列并返回结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8747","version":"3.2.0","params":[],"back":{"key":"var array = [1, 2];\nvar wrapped = _(array).push(3);\n \nconsole.log(array);\n// => [1, 2]\n \nwrapped = wrapped.commit();\nconsole.log(array);\n// => [1, 2, 3]\n \nwrapped.last();\n// => 3\n \nconsole.log(array);\n// => [1, 2, 3]","type":"ar array = [1, 2];\nvar wrapped = _(array).push(3);\n \nconsole.log(array);\n// => [1, 2]\n \nwrapped = wrapped.commit();\nconsole.log(array);\n// => [1, 2, 3]\n \nwrapped.last();\n// => 3\n \nconsole.log(array);\n// => [1, 2, 3"},"class":"Seq"},{"funcName":"prototype.next","useAge":"_.prototype.next()","desc":"获得包装对象的下一个值，遵循 iterator protocol。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8773","version":"4.0.0","params":[],"back":{"key":"var wrapped = _([1, 2]);\n \nwrapped.next();\n// => { 'done'","desc":" false, 'value'","type":"ar wrapped = _([1, 2]);\n \nwrapped.next();\n// => { 'done"},"class":"Seq"},{"funcName":"prototype.plant","useAge":"_.prototype.plant(value)","desc":"创建一个链式队列的拷贝，传入的 value 作为链式队列的值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8829","version":"3.2.0","params":[{"key":"value (*)","desc":" 替换原值的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(Object)","desc":" 返回 lodash 的包装实例。","type":"Object"},"demoCode":"function square(n) {\n  return n * n;\n}\n \nvar wrapped = _([1, 2]).map(square);\nvar other = wrapped.plant([3, 4]);\n \nother.value();\n// => [9, 16]\n \nwrapped.value();\n// => [1, 4]","class":"Seq"},{"funcName":"prototype.reverse","useAge":"_.prototype.reverse()","desc":"这个方法是 _.reverse 的包装版本 。\n\n注意: 这种方法会改变包装数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8869","version":"0.1.0","params":[],"back":{"key":"var array = [1, 2, 3];\n \n_(array).reverse().value()\n// => [3, 2, 1]\n \nconsole.log(array);\n// => [3, 2, 1]","type":"ar array = [1, 2, 3];\n \n_(array).reverse().value()\n// => [3, 2, 1]\n \nconsole.log(array);\n// => [3, 2, 1"},"class":"Seq"},{"funcName":"prototype.value","useAge":"_.prototype.value()","desc":"执行链式队列并提取解链后的值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L8901","version":"0.1.0","params":[{"key":"_.prototype.toJSON, _.prototype.valueOf","isNeed":true,"type":"_.prototype.toJSON, _.prototype.valueO","paramName":"_.prototype.toJSON,"}],"back":{"key":"(*)","desc":" 返回解链后的值。","type":"*"},"demoCode":"_([1, 2, 3]).value();\n// => [1, 2, 3]","class":"Seq"},{"funcName":"camelCase","useAge":"_.camelCase([string=''])","desc":"转换字符串string为 驼峰写法。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13930","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回驼峰写法的字符串。","type":"string"},"demoCode":"_.camelCase('Foo Bar');\n// => 'fooBar'\n \n_.camelCase('--foo-bar--');\n// => 'fooBar'\n \n_.camelCase('__FOO_BAR__');\n// => 'fooBar'","class":"String"},{"funcName":"capitalize","useAge":"_.capitalize([string=''])","desc":"转换字符串string首字母为大写，剩下为小写。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13950","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要大写开头的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回大写开头的字符串。","type":"string"},"demoCode":"_.capitalize('FRED');\n// => 'Fred'","class":"String"},{"funcName":"deburr","useAge":"_.deburr([string=''])","desc":"转换字符串string中 拉丁语-1补充字母 和 拉丁语扩展字母-A 为基本的拉丁字母，并且去除组合变音标记。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L13972","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要处理的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回处理后的字符串。","type":"string"},"demoCode":"_.deburr('déjà vu');\n// => 'deja vu'","class":"String"},{"funcName":"endsWith","useAge":"_.endsWith([string=''], [target], [position=string.length])","desc":"检查字符串string是否以给定的target字符串结尾。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14000","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要检索的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[target] (string)","desc":" 要检索字符。","isNeed":false,"type":"string","paramName":"[target]"},{"key":"[position=string.length] (number)","desc":" 检索的位置。","isNeed":false,"type":"number","paramName":"position","initValue":"string.length"}],"back":{"key":"(boolean)","desc":" 如果字符串string以target字符串结尾，那么返回 true，否则返回 false。","type":"boolean"},"demoCode":"_.endsWith('abc', 'c');\n// => true\n \n_.endsWith('abc', 'b');\n// => false\n \n_.endsWith('abc', 'b', 2);\n// => true","class":"String"},{"funcName":"escape","useAge":"_.escape([string=''])","desc":"转义string中的 \"&\", \"<\", \">\", '\"', \"'\", 和 \"`\" 字符为HTML实体字符。\n\n注意: 不会转义其他字符。如果需要，可以使用第三方库，例如 he。\n\n虽然 \">\" 是对称转义的，字符如 \">\" 和 \"/\" 没有特殊的意义，所以不需要在 HTML 转义。 除非它们是标签的一部分，或者是不带引号的属性值。 查看 Mathias Bynens's article 的文章 (under \"semi-related fun fact\") 了解详情 。\n\n在 IE < 9 中转义引号，因为会中断属性值或 HTML 注释，查看 HTML5 Security Cheatsheet 的 #59, #102, #108, 和 #133, 以及 #133 了解详情。\n\n当解析 HTML 时，总应该在 属性值上使用引号 以减少 XSS 的可能性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14042","version":"0.1.0","params":[{"key":"[string=''] (string)","desc":" 要转义的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回转义后的字符串。","type":"string"},"demoCode":"_.escape('fred, barney, & pebbles');\n// => 'fred, barney, &amp; pebbles'","class":"String"},{"funcName":"escapeRegExp","useAge":"_.escapeRegExp([string=''])","desc":"转义 RegExp 字符串中特殊的字符 \"^\", \"$\", \"\", \".\", \"*\", \"+\", \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", 和 \"|\" in .","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14064","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要转义的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回转义后的字符串。","type":"string"},"demoCode":"_.escapeRegExp('[lodash](https://lodash.com/)');\n// => '\\[lodash\\]\\(https://lodash\\.com/\\)'","class":"String"},{"funcName":"kebabCase","useAge":"_.kebabCase([string=''])","desc":"转换字符串string为 kebab case.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14092","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回转换后的字符串。","type":"string"},"demoCode":"_.kebabCase('Foo Bar');\n// => 'foo-bar'\n \n_.kebabCase('fooBar');\n// => 'foo-bar'\n \n_.kebabCase('__FOO_BAR__');\n// => 'foo-bar'","class":"String"},{"funcName":"lowerCase","useAge":"_.lowerCase([string=''])","desc":"转换字符串string以空格分开单词，并转换为小写。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14116","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回转换后的字符串。","type":"string"},"demoCode":"_.lowerCase('--Foo-Bar--');\n// => 'foo bar'\n \n_.lowerCase('fooBar');\n// => 'foo bar'\n \n_.lowerCase('__FOO_BAR__');\n// => 'foo bar'","class":"String"},{"funcName":"lowerFirst","useAge":"_.lowerFirst([string=''])","desc":"转换字符串string的首字母为小写。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14137","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回转换后的字符串。","type":"string"},"demoCode":"_.lowerFirst('Fred');\n// => 'fred'\n \n_.lowerFirst('FRED');\n// => 'fRED'","class":"String"},{"funcName":"pad","useAge":"_.pad([string=''], [length=0], [chars=' '])","desc":"如果string字符串长度小于 length 则从左侧和右侧填充字符。 如果没法平均分配，则截断超出的长度。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14162","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要填充的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[length=0] (number)","desc":" 填充的长度。","isNeed":false,"type":"number","paramName":"length","initValue":"0"},{"key":"[chars=' '] (string)","desc":" 填充字符。","isNeed":false,"type":"string","paramName":"chars","initValue":""}],"back":{"key":"(string)","desc":" 返回填充后的字符串。","type":"string"},"demoCode":"_.pad('abc', 8);\n// => '  abc   '\n \n_.pad('abc', 8, '_-');\n// => '_-abc_-_'\n \n_.pad('abc', 3);\n// => 'abc'","class":"String"},{"funcName":"padEnd","useAge":"_.padEnd([string=''], [length=0], [chars=' '])","desc":"如果string字符串长度小于 length 则在右侧填充字符。 如果超出length长度则截断超出的部分。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14201","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要填充的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[length=0] (number)","desc":" 填充的长度。","isNeed":false,"type":"number","paramName":"length","initValue":"0"},{"key":"[chars=' '] (string)","desc":" 填充字符。","isNeed":false,"type":"string","paramName":"chars","initValue":""}],"back":{"key":"(string)","desc":" 返回填充后的字符串。","type":"string"},"demoCode":"_.padEnd('abc', 6);\n// => 'abc   '\n \n_.padEnd('abc', 6, '_-');\n// => 'abc_-_'\n \n_.padEnd('abc', 3);\n// => 'abc'","class":"String"},{"funcName":"padStart","useAge":"_.padStart([string=''], [length=0], [chars=' '])","desc":"如果string字符串长度小于 length 则在左侧填充字符。 如果超出length长度则截断超出的部分。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14234","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要填充的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[length=0] (number)","desc":" 填充的长度。","isNeed":false,"type":"number","paramName":"length","initValue":"0"},{"key":"[chars=' '] (string)","desc":" 填充字符。","isNeed":false,"type":"string","paramName":"chars","initValue":""}],"back":{"key":"(string)","desc":" 返回填充后的字符串。","type":"string"},"demoCode":"_.padStart('abc', 6);\n// => '   abc'\n \n_.padStart('abc', 6, '_-');\n// => '_-_abc'\n \n_.padStart('abc', 3);\n// => 'abc'","class":"String"},{"funcName":"parseInt","useAge":"_.parseInt(string, [radix=10])","desc":"转换string字符串为指定基数的整数。 如果基数是 undefined 或者 0，则radix基数默认是10，如果string字符串是16进制，则radix基数为 16。\n\n注意: 这个方法与 ES5 implementation 的 parseInt是一样的。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14268","version":"1.1.0","params":[{"key":"string (string)","desc":" 要转换的字符串。","isNeed":true,"type":"string","paramName":"string"},{"key":"[radix=10] (number)","desc":"转换基数。","isNeed":false,"type":"number","paramName":"radix","initValue":"10"}],"back":{"key":"(number)","desc":" 返回转换后的整数。","type":"number"},"demoCode":"_.parseInt('08');\n// => 8\n \n_.map(['6', '08', '10'], _.parseInt);\n// => [6, 8, 10]","class":"String"},{"funcName":"repeat","useAge":"_.repeat([string=''], [n=1])","desc":"重复 N 次给定字符串。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14299","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要重复的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[n=1] (number)","desc":" 重复的次数。","isNeed":false,"type":"number","paramName":"n","initValue":"1"}],"back":{"key":"(string)","desc":" 返回重复的字符串。","type":"string"},"demoCode":"_.repeat('*', 3);\n// => '***'\n \n_.repeat('abc', 2);\n// => 'abcabc'\n \n_.repeat('abc', 0);\n// => ''","class":"String"},{"funcName":"replace","useAge":"_.replace([string=''], pattern, replacement)","desc":"替换string字符串中匹配的pattern为给定的replacement 。\n\n注意: 这个方法基于 String#replace.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14327","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 待替换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"pattern (RegExp|string)","desc":" 要匹配的内容。","isNeed":true,"type":"RegExp|string","paramName":"pattern"},{"key":"replacement (Function|string)","desc":" 替换的内容。","isNeed":true,"type":"Function|string","paramName":"replacement"}],"back":{"key":"(string)","desc":" 返回替换后的字符串","type":"string"},"demoCode":"_.replace('Hi Fred', 'Fred', 'Barney');\n// => 'Hi Barney'","class":"String"},{"funcName":"snakeCase","useAge":"_.snakeCase([string=''])","desc":"转换字符串string为 snake case.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14355","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回转换后的字符串。","type":"string"},"demoCode":"_.snakeCase('Foo Bar');\n// => 'foo_bar'\n \n_.snakeCase('fooBar');\n// => 'foo_bar'\n \n_.snakeCase('--FOO-BAR--');\n// => 'foo_bar'","class":"String"},{"funcName":"split","useAge":"_.split([string=''], separator, [limit])","desc":"根据separator 拆分字符串string。\n\n注意: 这个方法基于 String#split.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14378","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要拆分的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"separator (RegExp|string)","desc":" 拆分的分隔符。","isNeed":true,"type":"RegExp|string","paramName":"separator"},{"key":"[limit] (number)","desc":" 限制结果的数量。","isNeed":false,"type":"number","paramName":"[limit]"}],"back":{"key":"(Array)","desc":" 返回拆分部分的字符串的数组。","type":"Array"},"demoCode":"_.split('a-b-c', '-', 2);\n// => ['a', 'b']","class":"String"},{"funcName":"startCase","useAge":"_.startCase([string=''])","desc":"转换 string 字符串为 start case.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14420","version":"3.1.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回转换后的字符串。","type":"string"},"demoCode":"_.startCase('--foo-bar--');\n// => 'Foo Bar'\n \n_.startCase('fooBar');\n// => 'Foo Bar'\n \n_.startCase('__FOO_BAR__');\n// => 'FOO BAR'","class":"String"},{"funcName":"startsWith","useAge":"_.startsWith([string=''], [target], [position=0])","desc":"检查字符串string是否以 target 开头。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14447","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要检索的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[target] (string)","desc":" 要检查的字符串。","isNeed":false,"type":"string","paramName":"[target]"},{"key":"[position=0] (number)","desc":" 检索的位置。","isNeed":false,"type":"number","paramName":"position","initValue":"0"}],"back":{"key":"(boolean)","desc":" 如果string以 target，那么返回true，否则返回 false 。","type":"boolean"},"demoCode":"_.startsWith('abc', 'a');\n// => true\n \n_.startsWith('abc', 'b');\n// => false\n \n_.startsWith('abc', 'b', 1);\n// => true","class":"String"},{"funcName":"template","useAge":"_.template([string=''], [options={}])","desc":"创建一个预编译模板方法，可以插入数据到模板中 \"interpolate\" 分隔符相应的位置。 HTML会在 \"escape\" 分隔符中转换为相应实体。 在 \"evaluate\" 分隔符中允许执行JavaScript代码。 在模板中可以自由访问变量。 如果设置了选项对象，则会优先覆盖 _.templateSettings 的值。\n\n注意: 在开发过程中，构建 _.template可以使用 sourceURLs， 便于调试。\n\n了解更多预编译模板的信息查看 lodash的自定义构建文档。\n\n了解更多 Chrome 沙箱扩展的信息查看 Chrome的扩展文档。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14558","version":"0.1.0","params":[{"key":"[string=''] (string)","desc":" 模板字符串.","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[options={}] (Object)","desc":" 选项对象.","isNeed":false,"type":"Object","paramName":"options","initValue":"{}"},{"key":"[options.escape=_.templateSettings.escape] (RegExp)","desc":" \"escape\" 分隔符.","isNeed":false,"type":"RegExp","paramName":"options.escape","initValue":"_.templateSettings.escape"},{"key":"[options.evaluate=_.templateSettings.evaluate] (RegExp)","desc":" \"evaluate\" 分隔符.","isNeed":false,"type":"RegExp","paramName":"options.evaluate","initValue":"_.templateSettings.evaluate"},{"key":"[options.imports=_.templateSettings.imports] (Object)","desc":" 导入对象到模板中作为自由变量。","isNeed":false,"type":"Object","paramName":"options.imports","initValue":"_.templateSettings.imports"},{"key":"[options.interpolate=_.templateSettings.interpolate] (RegExp)","desc":" \"interpolate\" 分隔符。","isNeed":false,"type":"RegExp","paramName":"options.interpolate","initValue":"_.templateSettings.interpolate"},{"key":"[options.sourceURL='lodash.templateSources[n]'] (string)","desc":" 模板编译的来源URL。","isNeed":false,"type":"string","paramName":"options.sourceURL","initValue":"'lodash.templateSources[n]'"},{"key":"[options.variable='obj'] (string)","desc":" 数据对象的变量名。","isNeed":false,"type":"string","paramName":"options.variable","initValue":"'obj'"}],"back":{"key":"(Function)","desc":" 返回编译模板函数。","type":"Function"},"demoCode":"// 使用 \"interpolate\" 分隔符创建编译模板\nvar compiled = _.template('hello <%= user %>!');\ncompiled({ 'user': 'fred' });\n// => 'hello fred!'\n \n// 使用 HTML \"escape\" 转义数据的值\nvar compiled = _.template('<b><%- value %></b>');\ncompiled({ 'value': '<script>' });\n// => '<b>&lt;script&gt;</b>'\n \n// 使用 \"evaluate\" 分隔符执行 JavaScript 和 生成HTML代码\nvar compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n \n// 在 \"evaluate\" 分隔符中使用内部的 `print` 函数\nvar compiled = _.template('<% print(\"hello \" + user); %>!');\ncompiled({ 'user': 'barney' });\n// => 'hello barney!'\n \n// 使用 ES 分隔符代替默认的 \"interpolate\" 分隔符\nvar compiled = _.template('hello ${ user }!');\ncompiled({ 'user': 'pebbles' });\n// => 'hello pebbles!'\n \n// 使用自定义的模板分隔符\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\nvar compiled = _.template('hello {{ user }}!');\ncompiled({ 'user': 'mustache' });\n// => 'hello mustache!'\n \n// 使用反斜杠符号作为纯文本处理\nvar compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\ncompiled({ 'value': 'ignored' });\n// => '<%- value %>'\n \n// 使用 `imports` 选项导入 `jq` 作为 `jQuery` 的别名\nvar text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\nvar compiled = _.template(text, { 'imports': { 'jq': jQuery } });\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n \n// 使用 `sourceURL` 选项指定模板的来源URL\nvar compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\ncompiled(data);\n// => 在开发工具的 Sources 选项卡 或 Resources 面板中找到 \"greeting.jst\"\n \n// 使用 `variable` 选项确保在编译模板中不声明变量\nvar compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n//   var __t, __p = '';\n//   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n//   return __p;\n// }\n \n// 使用 `source` 特性内联编译模板\n// 便以查看行号、错误信息、堆栈\nfs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n  var JST = {\\\n    \"main\": ' + _.template(mainText).source + '\\\n  };\\\n');","class":"String"},{"funcName":"toLower","useAge":"_.toLower([string=''])","desc":"转换整个string字符串的字符为小写，类似 String#toLowerCase。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14687","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回小写的字符串。","type":"string"},"demoCode":"_.toLower('--Foo-Bar--');\n// => '--foo-bar--'\n \n_.toLower('fooBar');\n// => 'foobar'\n \n_.toLower('__FOO_BAR__');\n// => '__foo_bar__'","class":"String"},{"funcName":"toUpper","useAge":"_.toUpper([string=''])","desc":"转换整个string字符串的字符为大写，类似 String#toUpperCase.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14712","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回大写的字符串。","type":"string"},"demoCode":"_.toUpper('--foo-bar--');\n// => '--FOO-BAR--'\n \n_.toUpper('fooBar');\n// => 'FOOBAR'\n \n_.toUpper('__foo_bar__');\n// => '__FOO_BAR__'","class":"String"},{"funcName":"trim","useAge":"_.trim([string=''], [chars=whitespace])","desc":"从string字符串中移除前面和后面的 空格 或 指定的字符。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14738","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要处理的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[chars=whitespace] (string)","desc":" 要移除的字符。","isNeed":false,"type":"string","paramName":"chars","initValue":"whitespace"}],"back":{"key":"(string)","desc":" 返回处理后的字符串。","type":"string"},"demoCode":"_.trim('  abc  ');\n// => 'abc'\n \n_.trim('-_-abc-_-', '_-');\n// => 'abc'\n \n_.map(['  foo  ', '  bar  '], _.trim);\n// => ['foo', 'bar']","class":"String"},{"funcName":"trimEnd","useAge":"_.trimEnd([string=''], [chars=whitespace])","desc":"从string字符串中移除后面的 空格 或 指定的字符。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14773","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要处理的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[chars=whitespace] (string)","desc":" 要移除的字符。","isNeed":false,"type":"string","paramName":"chars","initValue":"whitespace"}],"back":{"key":"(string)","desc":" 返回处理后的字符串。","type":"string"},"demoCode":"_.trimEnd('  abc  ');\n// => '  abc'\n \n_.trimEnd('-_-abc-_-', '_-');\n// => '-_-abc'","class":"String"},{"funcName":"trimStart","useAge":"_.trimStart([string=''], [chars=whitespace])","desc":"从string字符串中移除前面的 空格 或 指定的字符。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14806","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要处理的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[chars=whitespace] (string)","desc":" 要移除的字符。","isNeed":false,"type":"string","paramName":"chars","initValue":"whitespace"}],"back":{"key":"(string)","desc":" 返回处理后的字符串。","type":"string"},"demoCode":"_.trimStart('  abc  ');\n// => 'abc  '\n \n_.trimStart('-_-abc-_-', '_-');\n// => 'abc-_-'","class":"String"},{"funcName":"truncate","useAge":"_.truncate([string=''], [options={}])","desc":"截断string字符串，如果字符串超出了限定的最大值。 被截断的字符串后面会以 omission 代替，omission 默认是 \"...\"。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14857","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要截断的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[options={}] (Object)","desc":" 选项对象。","isNeed":false,"type":"Object","paramName":"options","initValue":"{}"},{"key":"[options.length=30] (number)","desc":" 允许的最大长度。","isNeed":false,"type":"number","paramName":"options.length","initValue":"30"},{"key":"[options.omission='...'] (string)","desc":" 超出后的代替字符。","isNeed":false,"type":"string","paramName":"options.omission","initValue":"'...'"},{"key":"[options.separator] (RegExp|string)","desc":" 截断点。","isNeed":false,"type":"RegExp|string","paramName":"[options.separator]"}],"back":{"key":"(string)","desc":" Returns the truncated string.","type":"string"},"demoCode":"_.truncate('hi-diddly-ho there, neighborino');\n// => 'hi-diddly-ho there, neighbo...'\n \n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': ' '\n});\n// => 'hi-diddly-ho there,...'\n \n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': /,? +/\n});\n// => 'hi-diddly-ho there...'\n \n_.truncate('hi-diddly-ho there, neighborino', {\n  'omission': ' [...]'\n});\n// => 'hi-diddly-ho there, neig [...]'","class":"String"},{"funcName":"unescape","useAge":"_.unescape([string=''])","desc":"_.escape的反向版。 这个方法转换string字符串中的 HTML 实体 &amp;, &lt;, &gt;, &quot;, &#39;, 和 &#96; 为对应的字符。\n\n注意: 不会转换其他的 HTML 实体，需要转换可以使用类似 he 的第三方库。注意: 不会转换其他的 HTML 实体，需要转换可以使用第三方库，类似 he。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14932","version":"0.6.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回转换后的字符串。","type":"string"},"demoCode":"_.unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'","class":"String"},{"funcName":"upperCase","useAge":"_.upperCase([string=''])","desc":"转换字符串string为 空格 分隔的大写单词。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14959","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回大写单词。","type":"string"},"demoCode":"_.upperCase('--foo-bar');\n// => 'FOO BAR'\n \n_.upperCase('fooBar');\n// => 'FOO BAR'\n \n_.upperCase('__foo_bar__');\n// => 'FOO BAR'","class":"String"},{"funcName":"upperFirst","useAge":"_.upperFirst([string=''])","desc":"转换字符串string的首字母为大写。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L14980","version":"4.0.0","params":[{"key":"[string=''] (string)","desc":" 要转换的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"}],"back":{"key":"(string)","desc":" 返回转换后的字符串。","type":"string"},"demoCode":"_.upperFirst('fred');\n// => 'Fred'\n \n_.upperFirst('FRED');\n// => 'FRED'","class":"String"},{"funcName":"words","useAge":"_.words([string=''], [pattern])","desc":"拆分字符串string中的词为数组 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15001","version":"3.0.0","params":[{"key":"[string=''] (string)","desc":" 要拆分的字符串。","isNeed":false,"type":"string","paramName":"string","initValue":"''"},{"key":"[pattern] (RegExp|string)","desc":" 匹配模式。","isNeed":false,"type":"RegExp|string","paramName":"[pattern]"}],"back":{"key":"(Array)","desc":" 返回拆分string后的数组。","type":"Array"},"demoCode":"_.words('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n \n_.words('fred, barney, & pebbles', /[^, ]+/g);\n// => ['fred', 'barney', '&', 'pebbles']","class":"String"},{"funcName":"attempt","useAge":"_.attempt(func, [args])","desc":"尝试调用func，返回结果 或者 捕捉错误对象。任何附加的参数都会在调用时传给func。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15035","version":"3.0.0","params":[{"key":"func (Function)","desc":" 要尝试调用的函数。","isNeed":true,"type":"Function","paramName":"func"},{"key":"[args] (...*)","desc":" 调用func时，传递的参数。","isNeed":false,"type":"...*","paramName":"[args]"}],"back":{"key":"(*)","desc":" 返回func结果或者错误对象。","type":"*"},"demoCode":"// Avoid throwing errors for invalid selectors.\nvar elements = _.attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '>_>');\n \nif (_.isError(elements)) {\n  elements = [];\n}","class":"Util"},{"funcName":"bindAll","useAge":"_.bindAll(object, methodNames)","desc":"绑定一个对象的方法到对象本身，覆盖现有的方法。\n\n注意: 这个方法不会设置绑定函数的 \"length\" 属性。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15069","version":"0.1.0","params":[{"key":"object (Object)","desc":" 用来绑定和分配绑定方法的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"methodNames (...(string|string[]))","desc":" 对象绑定方法的名称。","isNeed":false,"type":"...(string|string[]","paramName":"methodNames"}],"back":{"key":"(Object)","desc":" 返回 object.","type":"Object"},"demoCode":"var view = {\n  'label': 'docs',\n  'click': function() {\n    console.log('clicked ' + this.label);\n  }\n};\n \n_.bindAll(view, ['click']);\njQuery(element).on('click', view.click);\n// => Logs 'clicked docs' when clicked.","class":"Util"},{"funcName":"cond","useAge":"_.cond(pairs)","desc":"创建了一个函数，这个函数会迭代pairs，并调用最先返回真值对应的函数。该断言函数对绑定 this 及传入创建函数的参数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15106","version":"4.0.0","params":[{"key":"pairs (Array)","desc":" 断言函数对。","isNeed":true,"type":"Array","paramName":"pairs"}],"back":{"key":"(Function)","desc":" 返回新的复合函数。","type":"Function"},"demoCode":"var func = _.cond([\n  [_.matches({ 'a': 1 }),           _.constant('matches A')],\n  [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n  [_.stubTrue,                      _.constant('no match')]\n]);\n \nfunc({ 'a': 1, 'b': 2 });\n// => 'matches A'\n \nfunc({ 'a': 0, 'b': 1 });\n// => 'matches B'\n \nfunc({ 'a': '1', 'b': '2' });\n// => 'no match'","class":"Util"},{"funcName":"conforms","useAge":"_.conforms(source)","desc":"创建一个函数。 这个函数会 调用 source 的属性名对应的 predicate 与传入对象相对应属性名的值进行断言处理。 如果都符合返回 true ，否则返回 false 。\n\n注意: 当source为偏应用时，这种方法等价于 _.conformsTo。（关于偏应用大家可以自己到google上搜索一下）。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15152","version":"4.0.0","params":[{"key":"source (Object)","desc":" 包含断言属性值的对象。","isNeed":true,"type":"Object","paramName":"source"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var objects = [\n  { 'a': 2, 'b': 1 },\n  { 'a': 1, 'b': 2 }\n];\n \n_.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n// => [{ 'a': 1, 'b': 2 }]","class":"Util"},{"funcName":"constant","useAge":"_.constant(value)","desc":"创建一个返回 value 的函数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15175","version":"2.4.0","params":[{"key":"value (*)","desc":" 要新函数返回的值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(Function)","desc":" 返回新的常量函数。","type":"Function"},"demoCode":"var objects = _.times(2, _.constant({ 'a': 1 }));\n \nconsole.log(objects);\n// => [{ 'a': 1 }, { 'a': 1 }]\n \nconsole.log(objects[0] === objects[1]);\n// => true","class":"Util"},{"funcName":"defaultTo","useAge":"_.defaultTo(value, defaultValue)","desc":"检查value，以确定一个默认值是否应被返回。如果value为NaN, null, 或者 undefined，那么返回defaultValue默认值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15201","version":"4.14.0","params":[{"key":"value (*)","desc":" 要检查的值。","isNeed":true,"type":"*","paramName":"value"},{"key":"defaultValue (*)","desc":" 默认值。","isNeed":true,"type":"*","paramName":"defaultValue"}],"back":{"key":"(*)","desc":" 返回 resolved 值。","type":"*"},"demoCode":"_.defaultTo(1, 10);\n// => 1\n \n_.defaultTo(undefined, 10);\n// => 10","class":"Util"},{"funcName":"flow","useAge":"_.flow([funcs])","desc":"创建一个函数。 返回的结果是调用提供函数的结果，this 会绑定到创建函数。 每一个连续调用，传入的参数都是前一个函数返回的结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15227","version":"3.0.0","params":[{"key":"[funcs] (...(Function|Function[]))","desc":" 要调用的函数。","isNeed":false,"type":"...(Function|Function[]","paramName":"[funcs]"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"function square(n) {\n  return n * n;\n}\n \nvar addSquare = _.flow([_.add, square]);\naddSquare(1, 2);\n// => 9","class":"Util"},{"funcName":"flowRight","useAge":"_.flowRight([funcs])","desc":"这个方法类似 _.flow，除了它调用函数的顺序是从右往左的。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15250","version":"3.0.0","params":[{"key":"[funcs] (...(Function|Function[]))","desc":" 要调用的函数。","isNeed":false,"type":"...(Function|Function[]","paramName":"[funcs]"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"function square(n) {\n  return n * n;\n}\n \nvar addSquare = _.flowRight([square, _.add]);\naddSquare(1, 2);\n// => 9","class":"Util"},{"funcName":"identity","useAge":"_.identity(value)","desc":"这个方法返回首个提供的参数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15268","version":"0.1.0","params":[{"key":"value (*)","desc":" 任何值。","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(*)","desc":" 返回 value.","type":"*"},"demoCode":"var object = { 'a': 1 };\n \nconsole.log(_.identity(object) === object);\n// => true","class":"Util"},{"funcName":"iteratee","useAge":"_.iteratee([func=_.identity])","desc":"创建一个函数，通过创建函数的参数调用 func 函数。 如果 func 是一个属性名，传入包含这个属性名的对象，回调返回对应属性名的值。 如果 func 是一个对象，传入的元素有相同的对象属性，回调返回 true 。 其他情况返回 false 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15314","version":"4.0.0","params":[{"key":"[func=_.identity] (*)","desc":" 转换成 callback 的值。","isNeed":false,"type":"*","paramName":"func","initValue":"_.identity"}],"back":{"key":"(Function)","desc":" 返回回调函数 callback。","type":"Function"},"demoCode":"var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n \n// The `_.matches` iteratee shorthand.\n_.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n// => [{ 'user': 'barney', 'age': 36, 'active': true }]\n \n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, _.iteratee(['user', 'fred']));\n// => [{ 'user': 'fred', 'age': 40 }]\n \n// The `_.property` iteratee shorthand.\n_.map(users, _.iteratee('user'));\n// => ['barney', 'fred']\n \n// Create custom iteratee shorthands.\n_.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n  return !_.isRegExp(func) ? iteratee(func) : function(string) {\n    return func.test(string);\n  };\n});\n \n_.filter(['abc', 'def'], /ef/);\n// => ['def']","class":"Util"},{"funcName":"matches","useAge":"_.matches(source)","desc":"创建一个深比较的方法来比较给定的对象和 source 对象。 如果给定的对象拥有相同的属性值返回 true，否则返回 false。\n\n注意: 创建的函数相当于 _.isMatch应用 source 。\n\n部分比较匹配空数组和空对象源值，分别针对任何数组或对象的价值。见 _.isEqual支持的价值比较的列表。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15346","version":"3.0.0","params":[{"key":"source (Object)","desc":" 要匹配属性值的源对象。","isNeed":true,"type":"Object","paramName":"source"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n \n_.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n// => [{ 'a': 4, 'b': 5, 'c': 6 }]","class":"Util"},{"funcName":"matchesProperty","useAge":"_.matchesProperty(path, srcValue)","desc":"创建一个深比较的方法来比较给定对象的 path 的值是否是 srcValue 。 如果是返回 true ，否则返回 false 。\n\n注意: 这个方法支持以 _.isEqual 的方式比较相同的值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15376","version":"3.2.0","params":[{"key":"path (Array|string)","desc":" 给定对象的属性路径名。","isNeed":true,"type":"Array|string","paramName":"path"},{"key":"srcValue (*)","desc":" 要匹配的值。","isNeed":true,"type":"*","paramName":"srcValue"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n \n_.find(objects, _.matchesProperty('a', 4));\n// => { 'a': 4, 'b': 5, 'c': 6 }","class":"Util"},{"funcName":"method","useAge":"_.method(path, [args])","desc":"创建一个调用给定对象 path 上的函数。 任何附加的参数都会传入这个调用函数中。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15404","version":"3.7.0","params":[{"key":"path (Array|string)","desc":" 调用函数所在对象的路径。","isNeed":true,"type":"Array|string","paramName":"path"},{"key":"[args] (...*)","desc":" 传递给调用函数的参数。","isNeed":false,"type":"...*","paramName":"[args]"}],"back":{"key":"(Function)","desc":" 返回新的调用函数。","type":"Function"},"demoCode":"var objects = [\n  { 'a': { 'b': _.constant(2) } },\n  { 'a': { 'b': _.constant(1) } }\n];\n \n_.map(objects, _.method('a.b'));\n// => [2, 1]\n \n_.map(objects, _.method(['a', 'b']));\n// => [2, 1]","class":"Util"},{"funcName":"methodOf","useAge":"_.methodOf(object, [args])","desc":"_.method的反向版。 这个创建一个函数调用给定 object 的 path 上的方法， 任何附加的参数都会传入这个调用函数中。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15433","version":"3.7.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"},{"key":"[args] (...*)","desc":" 传递给调用函数的参数。","isNeed":false,"type":"...*","paramName":"[args]"}],"back":{"key":"(Function)","desc":" 返回新的调用函数。","type":"Function"},"demoCode":"var array = _.times(3, _.constant),\n    object = { 'a': array, 'b': array, 'c': array };\n \n_.map(['a[2]', 'c[0]'], _.methodOf(object));\n// => [2, 0]\n \n_.map([['a', '2'], ['c', '0']], _.methodOf(object));\n// => [2, 0]","class":"Util"},{"funcName":"mixin","useAge":"_.mixin([object=lodash], source, [options={}])","desc":"添加来源对象自身的所有可枚举函数属性到目标对象。 如果 object 是个函数，那么函数方法将被添加到原型链上。\n\n注意: 使用 _.runInContext 来创建原始的 lodash 函数来避免修改造成的冲突。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15475","version":"0.1.0","params":[{"key":"[object=lodash] (Function|Object)","desc":" 目标对象。","isNeed":false,"type":"Function|Object","paramName":"object","initValue":"lodash"},{"key":"source (Object)","desc":" 来源对象。","isNeed":true,"type":"Object","paramName":"source"},{"key":"[options={}] (Object)","desc":" 选项对象。","isNeed":false,"type":"Object","paramName":"options","initValue":"{}"},{"key":"[options.chain=true] (boolean)","desc":" 是否开启链式操作。","isNeed":false,"type":"boolean","paramName":"options.chain","initValue":"true"}],"back":{"key":"(*)","desc":" 返回 object.","type":"*"},"demoCode":"function vowels(string) {\n  return _.filter(string, function(v) {\n    return /[aeiou]/i.test(v);\n  });\n}\n \n_.mixin({ 'vowels': vowels });\n_.vowels('fred');\n// => ['e']\n \n_('fred').vowels().value();\n// => ['e']\n \n_.mixin({ 'vowels': vowels }, { 'chain': false });\n_('fred').vowels();\n// => ['e']","class":"Util"},{"funcName":"noConflict","useAge":"_.noConflict()","desc":"释放 _ 变量为原来的值，并返回一个 lodash 的引用。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15524","version":"0.1.0","params":[],"back":{"key":"var lodash = _.noConflict();","type":"ar lodash = _.noConflict()"},"class":"Util"},{"funcName":"noop","useAge":"_.noop()","desc":"这个方法返回 undefined。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15543","version":"2.3.0","params":[],"demoCode":"_.times(2, _.noop);\n// => [undefined, undefined]","class":"Util"},{"funcName":"nthArg","useAge":"_.nthArg([n=0])","desc":"创建一个函数，这个函数返回第 n 个参数。如果 n为负数，则返回从结尾开始的第n个参数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15567","version":"4.0.0","params":[{"key":"[n=0] (number)","desc":" 要返回参数的索引值。","isNeed":false,"type":"number","paramName":"n","initValue":"0"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var func = _.nthArg(1);\nfunc('a', 'b', 'c', 'd');\n// => 'b'\n \nvar func = _.nthArg(-2);\nfunc('a', 'b', 'c', 'd');\n// => 'c'","class":"Util"},{"funcName":"over","useAge":"_.over([iteratees=[_.identity]])","desc":"创建一个函数，传入提供的参数的函数并调用 iteratees 返回结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15592","version":"4.0.0","params":[{"key":"[iteratees=[_.identity]] (...(Function|Function[]))","desc":" 要调用的 iteratees。","isNeed":false,"type":"...(Function|Function[]","paramName":"iteratees","initValue":"[_.identity]"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var func = _.over([Math.max, Math.min]);\n \nfunc(1, 2, 3, 4);\n// => [4, 1]","class":"Util"},{"funcName":"overEvery","useAge":"_.overEvery([predicates=[_.identity]])","desc":"建一个函数，传入提供的参数的函数并调用 predicates 判断是否 全部 都为真值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15618","version":"4.0.0","params":[{"key":"[predicates=[_.identity]] (...(Function|Function[]))","desc":" 要调用的 predicates。","isNeed":false,"type":"...(Function|Function[]","paramName":"predicates","initValue":"[_.identity]"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var func = _.overEvery([Boolean, isFinite]);\n \nfunc('1');\n// => true\n \nfunc(null);\n// => false\n \nfunc(NaN);\n// => false","class":"Util"},{"funcName":"overSome","useAge":"_.overSome([predicates=[_.identity]])","desc":"创建一个函数，传入提供的参数的函数并调用 predicates 判断是否 存在 有真值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15644","version":"4.0.0","params":[{"key":"[predicates=[_.identity]] (...(Function|Function[]))","desc":" 要调用的 predicates。","isNeed":false,"type":"...(Function|Function[]","paramName":"predicates","initValue":"[_.identity]"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var func = _.overSome([Boolean, isFinite]);\n \nfunc('1');\n// => true\n \nfunc(null);\n// => true\n \nfunc(NaN);\n// => false","class":"Util"},{"funcName":"property","useAge":"_.property(path)","desc":"创建一个返回给定对象的 path 的值的函数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15668","version":"2.4.0","params":[{"key":"path (Array|string)","desc":" 要得到值的属性路径。","isNeed":true,"type":"Array|string","paramName":"path"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var objects = [\n  { 'a': { 'b': 2 } },\n  { 'a': { 'b': 1 } }\n];\n \n_.map(objects, _.property('a.b'));\n// => [2, 1]\n \n_.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n// => [1, 2]","class":"Util"},{"funcName":"propertyOf","useAge":"_.propertyOf(object)","desc":"_.property的反相版本。 这个方法创建的函数返回给定 path 在object上的值。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15693","version":"3.0.0","params":[{"key":"object (Object)","desc":" 要检索的对象。","isNeed":true,"type":"Object","paramName":"object"}],"back":{"key":"(Function)","desc":" 返回新的函数。","type":"Function"},"demoCode":"var array = [0, 1, 2],\n    object = { 'a': array, 'b': array, 'c': array };\n \n_.map(['a[2]', 'c[0]'], _.propertyOf(object));\n// => [2, 0]\n \n_.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n// => [2, 0]","class":"Util"},{"funcName":"range","useAge":"_.range([start=0], end, [step=1])","desc":"创建一个包含从 start 到 end，但不包含 end 本身范围数字的数组。 如果 start 是负数，而 end 或 step 没有指定，那么 step 从 -1 为开始。 如果 end 没有指定，start 设置为 0。 如果 end 小于 start ，会创建一个空数组，除非指定了 step。\n\n注意:: JavaScript 遵循 IEEE-754 标准处理无法预料的浮点数结果。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15740","version":"0.1.0","params":[{"key":"[start=0] (number)","desc":" 开始的范围。","isNeed":false,"type":"number","paramName":"start","initValue":"0"},{"key":"end (number)","desc":" 结束的范围。","isNeed":true,"type":"number","paramName":"end"},{"key":"[step=1] (number)","desc":" 范围的增量 或者 减量。","isNeed":false,"type":"number","paramName":"step","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回范围内数字组成的新数组。","type":"Array"},"demoCode":"_.range(4);\n// => [0, 1, 2, 3]\n \n_.range(-4);\n// => [0, -1, -2, -3]\n \n_.range(1, 5);\n// => [1, 2, 3, 4]\n \n_.range(0, 20, 5);\n// => [0, 5, 10, 15]\n \n_.range(0, -4, -1);\n// => [0, -1, -2, -3]\n \n_.range(1, 4, 0);\n// => [1, 1, 1]\n \n_.range(0);\n// => []","class":"Util"},{"funcName":"rangeRight","useAge":"_.rangeRight([start=0], end, [step=1])","desc":"这个方法类似 _.range ， 除了它是降序生成值的。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15778","version":"4.0.0","params":[{"key":"[start=0] (number)","desc":" 开始的范围。","isNeed":false,"type":"number","paramName":"start","initValue":"0"},{"key":"end (number)","desc":" 结束的范围。","isNeed":true,"type":"number","paramName":"end"},{"key":"[step=1] (number)","desc":"范围的增量 或者 减量。","isNeed":false,"type":"number","paramName":"step","initValue":"1"}],"back":{"key":"(Array)","desc":" 返回范围内数字组成的新数组。","type":"Array"},"demoCode":"_.rangeRight(4);\n// => [3, 2, 1, 0]\n \n_.rangeRight(-4);\n// => [-3, -2, -1, 0]\n \n_.rangeRight(1, 5);\n// => [4, 3, 2, 1]\n \n_.rangeRight(0, 20, 5);\n// => [15, 10, 5, 0]\n \n_.rangeRight(0, -4, -1);\n// => [-3, -2, -1, 0]\n \n_.rangeRight(1, 4, 0);\n// => [1, 1, 1]\n \n_.rangeRight(0);\n// => []","class":"Util"},{"funcName":"runInContext","useAge":"_.runInContext([context=root])","desc":"创建一个给定context上下文对象的原始的 lodash 函数。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L1410","version":"1.1.0","params":[{"key":"[context=root] (Object)","desc":" 上下文对象。","isNeed":false,"type":"Object","paramName":"context","initValue":"root"}],"back":{"key":"(Function)","desc":" 返回新的 lodash 对象","type":"Function"},"demoCode":"_.mixin({ 'foo': _.constant('foo') });\n \nvar lodash = _.runInContext();\nlodash.mixin({ 'bar': lodash.constant('bar') });\n \n_.isFunction(_.foo);\n// => true\n_.isFunction(_.bar);\n// => false\n \nlodash.isFunction(lodash.foo);\n// => false\nlodash.isFunction(lodash.bar);\n// => true\n \n// 使用 `context` 模拟 `Date#getTime` 调用 `_.now`\nvar stubbed = _.runInContext({\n  'Date': function() {\n    return { 'getTime': stubGetTime };\n  }\n});\n \n// 或者在 Node.js 中创建一个更高级的 `defer`\nvar defer = _.runInContext({ 'setTimeout': setImmediate }).defer;","class":"Util"},{"funcName":"stubArray","useAge":"_.stubArray()","desc":"这个方法返回一个新的空数组。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15798","version":"4.13.0","params":[],"back":{"key":"var arrays = _.times(2, _.stubArray);\n \nconsole.log(arrays);\n// => [[], []]\n \nconsole.log(arrays[0] === arrays[1]);\n// => false","type":"ar arrays = _.times(2, _.stubArray);\n \nconsole.log(arrays);\n// => [[], []]\n \nconsole.log(arrays[0] === arrays[1]);\n// => fals"},"class":"Util"},{"funcName":"stubFalse","useAge":"_.stubFalse()","desc":"这个方法返回 false.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15815","version":"4.13.0","params":[],"back":{"key":"_.times(2, _.stubFalse);\n// => [false, false]","type":".times(2, _.stubFalse);\n// => [false, false"},"class":"Util"},{"funcName":"stubObject","useAge":"_.stubObject()","desc":"这个方法返回一个空对象.","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15837","version":"4.13.0","params":[],"back":{"key":"var objects = _.times(2, _.stubObject);\n \nconsole.log(objects);\n// => [{}, {}]\n \nconsole.log(objects[0] === objects[1]);\n// => false","type":"ar objects = _.times(2, _.stubObject);\n \nconsole.log(objects);\n// => [{}, {}]\n \nconsole.log(objects[0] === objects[1]);\n// => fals"},"class":"Util"},{"funcName":"stubString","useAge":"_.stubString()","desc":"这个方法返回一个空字符串。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15854","version":"4.13.0","params":[],"back":{"key":"_.times(2, _.stubString);\n// => ['', '']","type":".times(2, _.stubString);\n// => ['', ''"},"class":"Util"},{"funcName":"stubTrue","useAge":"_.stubTrue()","desc":"这个方法返回 true。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15871","version":"4.13.0","params":[],"back":{"key":"_.times(2, _.stubTrue);\n// => [true, true]","type":".times(2, _.stubTrue);\n// => [true, true"},"class":"Util"},{"funcName":"times","useAge":"_.times(n, [iteratee=_.identity])","desc":"调用 iteratee n 次，每次调用返回的结果存入到数组中。 iteratee 调用入1个参数： (index)。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15894","version":"0.1.0","params":[{"key":"n (number)","desc":" 调用 iteratee 的次数。","isNeed":true,"type":"number","paramName":"n"},{"key":"[iteratee=_.identity] (Function)","desc":" 每次迭代调用的函数。","isNeed":false,"type":"Function","paramName":"iteratee","initValue":"_.identity"}],"back":{"key":"(Array)","desc":" 返回调用结果的数组。","type":"Array"},"demoCode":"_.times(3, String);\n// => ['0', '1', '2']\n \n _.times(4, _.constant(0));\n// => [0, 0, 0, 0]","class":"Util"},{"funcName":"toPath","useAge":"_.toPath(value)","desc":"转化 value 为属性路径的数组 。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15929","version":"4.0.0","params":[{"key":"value (*)","desc":" 要转换的值","isNeed":true,"type":"*","paramName":"value"}],"back":{"key":"(Array)","desc":" 返回包含属性路径的数组。","type":"Array"},"demoCode":"_.toPath('a.b.c');\n// => ['a', 'b', 'c']\n \n_.toPath('a[0].b.c');\n// => ['a', '0', 'b', 'c']","class":"Util"},{"funcName":"uniqueId","useAge":"_.uniqueId([prefix=''])","desc":"生成唯一ID。 如果提供了 prefix ，会被添加到ID前缀上。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L15953","version":"0.1.0","params":[{"key":"[prefix=''] (string)","desc":" 要添加到ID前缀的值。","isNeed":false,"type":"string","paramName":"prefix","initValue":"''"}],"back":{"key":"(string)","desc":" 返回唯一ID。","type":"string"},"demoCode":"_.uniqueId('contact_');\n// => 'contact_104'\n \n_.uniqueId();\n// => '105'","class":"Util"},{"funcName":"VERSIO","useAge":"_.VERSION","desc":"(string): 语义化的版本号。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L16644","params":[],"class":"Properties"},{"funcName":"templateSetting","useAge":"_.templateSettings","desc":"(Object): 默认情况下，lodash使用的模板分隔符就像那他们嵌入到Ruby（ERB）一样。更改以下模板设置使用替代分隔符。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L1689","params":[],"class":"Properties"},{"funcName":"templateSettings.escap","useAge":"_.templateSettings.escape","desc":"(RegExp): 用于检测data属性值是否HTML转义。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L1697","params":[],"class":"Properties"},{"funcName":"templateSettings.evaluat","useAge":"_.templateSettings.evaluate","desc":"(RegExp): 用于检测代码来进行评估。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L1705","params":[],"class":"Properties"},{"funcName":"templateSettings.import","useAge":"_.templateSettings.imports","desc":"(Object): 用于导入变量到编译模板。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L1729","params":[],"class":"Properties"},{"funcName":"templateSettings.interpolat","useAge":"_.templateSettings.interpolate","desc":"(RegExp): 用于检测data属性值是否注入。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L1713","params":[],"class":"Properties"},{"funcName":"templateSettings.variabl","useAge":"_.templateSettings.variable","desc":"(string): 用于引用该数据对象中的模板文本。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L1721","params":[],"class":"Properties"},{"funcName":"templateSettings.imports.","useAge":"_.templateSettings.imports._","desc":"lodash 引用。","sourceCodeSrc":"https://github.com/lodash/lodash/blob/4.16.1/lodash.js#L1737","params":[],"class":"Methods"}]

export default data